#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
%\KOMAOptions{headings=small}
%\KOMAOptions{appendixprefix=false}
%\KOMAOptions{numbers=noenddot}
%\KOMAOptions{listof=totoc}
%\KOMAOptions{bibliography=totoc}
%\usepackage[table]{xcolor}
\usepackage{xcolor}
\usepackage[T1]{fontenc}
\usepackage{type1ec}
%\usepackage{cmsuper}

\usepackage{booktabs} %fr horizontale dicke striche in tabellen
\usepackage{tikz}
\usepackage{colortbl} % für \cellcolor in tabellen
%\@ifundefined{definecolor}
 %{\usepackage{color}}{}

% Fuer Listings, Quellcode, Progamme
\usepackage{listings}
\lstset{numbers=left, numberstyle=\tiny, numbersep=5pt, basicstyle=\scriptsize\ttfamily, frame=single}
\lstset{language=SQL}
\usepackage{bbding} % fuer hand right

\usepackage{longtable}
%\usepackage{sitable}
\usepackage{dcolumn}
\usepackage{textgreek}
\usepackage{lscape}

 %Fr das Stichwortverzeichnis  
%\usepackage{dcolumn} %fr die ausrichtung am komma in tabellen
\usepackage{float} %erforderlich um tabellen wie figuren numerieren zu lassen
\usepackage{fixmath}


\usepackage{graphics}



\usepackage{scrlayer-scrpage} %Komaskript
%\usepackage{subfigure} %fr untergrafiken
\usepackage{upgreek}

%\usepackage{mathrsfs}
%\usepackage{mathpazo}
\usepackage[notextcomp]{stix}

\restylefloat{table} %erforderlich um tabellen wie figuren numerieren zu lassen
\mathcode`,="013B %Komma ist Dezimaltrennzeichen in mat. Formeln
\mathcode`.="613A %Komma ist Dezimaltrennzeichen in mat. Formeln
%\setlength{\textheight}{23.8cm}

%\linespread{1}
  %aufname der subsubsections ins inhaltsverz.
 %numerierung der subsubsections
%\renewcommand*{\chapterpagestyle}{scrheadings} %setzt eine Kopfzeile auf Kapitelanfangsseiten
\renewcommand*{\indexpagestyle}{scrheadings} %setzt eine Kopfzeile auf Indexseiten
\setcounter{topnumber}{4}
\setcounter{bottomnumber}{4}
\setcounter{totalnumber}{4}
%\renewcommand{\textfraction}{0.01}
%\renewcommand{\topfraction}{0.99}
%\renewcommand{\bottomfraction}{0.99}
%\renewcommand{\floatpagefraction}{0.0}
\renewcommand\floatpagefraction{.98} %anteil an gleitobjekten pro Gleitobjekt-Seite, bevor eine neue Seite angelegt wird
\renewcommand\topfraction{1} %anteil pro seite an Gleitobjekten am oberen rand
\renewcommand\bottomfraction{1} %anteil pro seite an Gleitobjekten am unteren rand
\renewcommand\textfraction{.0}   %minimalanteil Text pro Seite
\setcounter{totalnumber}{3}
\setcounter{topnumber}{3}
\setcounter{bottomnumber}{3}

\ohead{\pagemark}
\ihead{\headmark}
\chead{}
\cfoot{}
\ifoot{}
\ofoot{}
%\automark[subsection]{section}
\setheadsepline{1pt}
\makeindex     % Fr das Sachregister/Index/Register
\pagenumbering{roman}


\hyphenation{
Spu-len-be-schleu-ni-gers 
Stör-quel-len
nach-träg-liche
}

% Für keinen Platz zwischen Funktion und Klammer
\let\originalleft\left
\let\originalright\right
\renewcommand{\left}{\mathopen{}\mathclose\bgroup\originalleft}
\renewcommand{\right}{\aftergroup\egroup\originalright}
\renewcommand{\pi}{\uppi}
\newcommand{\pfl}[1]{\begin{tikzpicture}\useasboundingbox (0,0) rectangle (0.01,0.01);\draw[->, line width=1pt] (0,0) .. controls (0.25,-0.25) and (0.25,-0.75) .. (0,-1); \draw (0.26,-0.5) node[anchor=west] {\ensuremath{#1}}; \end{tikzpicture}}
\usepackage[type={CC},modifier={by},version={4.0},]{doclicense}
\end_preamble
\options BCOR0mm,table,pointlessnumbers, appendixprefix=false, numbers=noenddot, listof=totoc, bibliography=totoc
\use_default_options false
\maintain_unincluded_children no
\language ngerman
\language_package default
\inputencoding utf8-plain
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format pdf2
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbh
\float_alignment class
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_author "Prof. Dr.-Ing. Thorbjörn Siaenen"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 4
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 2
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\branch modellbildung
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch vorwort
\selected 0
\filename_suffix 0
\color background background
\end_branch
\branch dank
\selected 0
\filename_suffix 0
\color background background
\end_branch
\branch einleitung
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch taylortest
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch beschleunigertypen
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch ausbreitungsgeschwindigkeit_rechnung
\selected 0
\filename_suffix 0
\color background background
\end_branch
\branch konstante_beschleunigung_am_ende
\selected 0
\filename_suffix 0
\color background background
\end_branch
\branch experimentelleraufbau
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch regelungskonzept
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch ergebnis
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch zusammenfassung
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch dina5
\selected 0
\filename_suffix 0
\color background background
\end_branch
\branch dina4
\selected 1
\filename_suffix 0
\color background background
\end_branch
\branch EinAusblendung
\selected 0
\filename_suffix 0
\color background background
\end_branch
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\listings_params "inputencoding=utf8,literate={{Ö}{{\&amp;quot;O}}1 {Ä}{{\&amp;quot;A}}1 {Ü}{{\&amp;quot;U}}1 {ß}{{\ss}}2 {ü}{{\&amp;quot;u}}1 {ä}{{\&amp;quot;a}}1 {ö}{{\&amp;quot;o}}1},language=Python"
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Konzeptsammlung Python
\end_layout

\begin_layout Author
Thorbjörn Siaenen
\end_layout

\begin_layout Date
Version v.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today 
\end_layout

\end_inset


\end_layout

\begin_layout Publishers

\size small
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
doclicenseThis  
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Dieses Werk ist lizenziert unter einer Creative Commons “Namensnennung 4.0 International” Lizenz.
 https://creativecommons.org/licenses/by/4.0/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section*
Einleitung
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset

Diese Sammlung zum Thema Python soll dazu helfen,
 ingenieurwissenschaftliche Aufgabenstellungen schnell nachrechnen zu können.
 Dazu gehört auch das Erstellen von Grafiken.
 Dieses Dokument wurde mit Sorgfalt erstellt.
 Dennoch können Fehler oder Ungenauigkeiten nicht ausgeschlossen werden.
 Sollten Sie einen Verbesserungsvorschlag haben,
 senden Sie ihn bitte an:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{
\backslash
fill}
\end_layout

\end_inset


\color blue

\begin_inset CommandInset href
LatexCommand href
name "t.siaenen@ostfalia.de"
target "t.siaenen@ostfalia.de"
type "mailto:"
literal "false"

\end_inset


\color inherit

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace*{
\backslash
fill}
\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Section
Syntax
\end_layout

\begin_layout Subsection
Zeilenumbruch im Code
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:zeilenumbruchimcode"

\end_inset

 Der Zeilenumbruch wird mit dem 
\backslash
 Backslash gemacht.
 Allgemein sollte eine Code-Zeile nicht breiter als 79 Zeichen sein.
 Quelle:
 PEP 8 Style Guide 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.python.org/dev/peps/pep-0008/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

z = Q3/((X-xp3)**2+ Y**2)+ 
\backslash

\end_layout

\begin_layout Plain Layout

Q4/((X-xp4)**2+ (Y-yp4)**2)**0.5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternativ kann der Backslash auch entfallen,
 wenn Code in runden Klammern steht:
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://note.nkmk.me/en/python-long-string/#:~:text=breaks%20in%20Python-,Use%20a%20backslash%20(%20%5C%20),is%20continued%2C%20ignoring%20subsequent%20newlines.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

z = 15/((20-13)**2
\end_layout

\begin_layout Plain Layout

         + 7**2)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kommentare
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:kommentare"

\end_inset

Kommentare werden mit einem Lattenkreuz gekennzeichnet
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Dies ist ein Kommentar
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mehrzeilenkommentare
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:mehrzeilenkommentare"

\end_inset

Kommentare über mehrere Zeilen werden mit drei Kochkommas gekennzeichnet:
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

'''
\end_layout

\begin_layout Plain Layout

Hier steht ein Kommentar
\end_layout

\begin_layout Plain Layout

über mehrere Zeilen
\end_layout

\begin_layout Plain Layout

'''
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Variablentypen ermitteln
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:variablentypen"

\end_inset

Variablen gehören einer Klasse an,
 die ermittelt werden kann
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

print(type(12)) # <class 'int'>
\end_layout

\begin_layout Plain Layout

print(type(1.2)) # <class 'float'>
\end_layout

\begin_layout Plain Layout

print(type('foobar')) # <class 'str'>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Einzelne Variablen löschen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:einzelnevariablenloeschen"

\end_inset

Einzelne Variablen können gelöscht werden
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x = 42.3
\end_layout

\begin_layout Plain Layout

y = 32.1
\end_layout

\begin_layout Plain Layout

del x,
 y # Loescht die Variablen
\end_layout

\end_inset


\end_layout

\begin_layout Section
Zahlen-Operationen
\end_layout

\begin_layout Subsection
Komplexe Zahlen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:komplexezahlen"

\end_inset

Eine komplexe Zahl wird mit einem angehangenen 
\family typewriter
j
\family default
 gekennzeichnet.
 Beispiel:
 
\begin_inset Formula $a=3+\mathrm{j}\,4$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a = 3+4j
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Euler-Form:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import cmath
\end_layout

\begin_layout Plain Layout

from math import pi
\end_layout

\begin_layout Plain Layout

z = 3*cmath.exp(1j*2*pi/6)
\end_layout

\begin_layout Plain Layout

print(z) #1.5+2.59j
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Real- und Imaginärteil extrahieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:realundimaginaerteil"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a = 3+4j
\end_layout

\begin_layout Plain Layout

a.real # = 3
\end_layout

\begin_layout Plain Layout

b.imag # = 4
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Quadrieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:quadrieren"

\end_inset


\begin_inset Formula $3^{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

3**2
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ganzzahlige Division
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:integer-division"

\end_inset

Division ohne Rest.
 Beispiel:
 
\begin_inset Formula $14\div4=3\,\text{Rest}\,2$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

14//4
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Modulo-Operator (Divisionsrest)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:integer-modulo"

\end_inset

Rest einer Division.
 Beispiel:
 
\begin_inset Formula $14\div5=2\,\text{Rest}\,4$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rest = 14%5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternativ
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

rest =np.mod(4.32,
 2) # ergibt 0.32
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Aufrunden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:aufrunden"

\end_inset

Aufrunden auf die nächste Ganzzahl
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

math.ceil(3.14) #ergibt 4
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Abrunden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:aufrunden-1"

\end_inset

Aufrunden auf die nächste Ganzzahl
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

math.floor(3.14) #ergibt 3
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Vergleiche Float und Integer
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vergleichfloatundinteger"

\end_inset

Bei Zahlenvergleichen wird gerundet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1.0000000000000001==1 # True
\end_layout

\begin_layout Plain Layout

1.000000000000001==1 # False
\end_layout

\end_inset


\end_layout

\begin_layout Section
Kontrollstrukturen
\end_layout

\begin_layout Subsection
Funktionen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:normalefunktion"

\end_inset

Funktionen haben einen Funktionsnamen,
 einen oder mehrere Parameter und eventuell einen Rückgabewert.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def plusneun(zahl):
\end_layout

\begin_layout Plain Layout

	erg = zahl + 9
\end_layout

\begin_layout Plain Layout

	return(erg)
\end_layout

\begin_layout Plain Layout

print(plusneun(1))
\end_layout

\begin_layout Plain Layout

# ergibt 10
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fallunterscheidung mit if
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:fallunterscheidungmitif"

\end_inset

Fallunterscheidungen:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a = 42
\end_layout

\begin_layout Plain Layout

if 10 < a:
\end_layout

\begin_layout Plain Layout

	print('10 < a')
\end_layout

\begin_layout Plain Layout

elif 10 == a:
\end_layout

\begin_layout Plain Layout

	print('10 = a')
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

	print('a < 10')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fallunterscheidung mit if (ternary operator)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:fallunterscheidungmitif-1"

\end_inset

Fallunterscheidungen:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

a = 42
\end_layout

\begin_layout Plain Layout

if 10 < a:
\end_layout

\begin_layout Plain Layout

	print('10 < a')
\end_layout

\begin_layout Plain Layout

elif 10 == a:
\end_layout

\begin_layout Plain Layout

	print('10 = a')
\end_layout

\begin_layout Plain Layout

else:
\end_layout

\begin_layout Plain Layout

	print('a < 10')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
for Schleife
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:forscheife"

\end_inset

For schleife (
\begin_inset Formula $k$
\end_inset

 durchläuft alle Zahlen zwischen 0 und 6.
 Die Schleife ende bei 
\begin_inset Formula $k=3$
\end_inset

)
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for k in range(7):
 
\end_layout

\begin_layout Plain Layout

	if k == 3:
\end_layout

\begin_layout Plain Layout

	break
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Boolsche Ausdrücke
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:boolscheausdruecke"

\end_inset

Boolsche Ausdrücke:
 
\family typewriter
(a <= b) and (c != d) or (e == f)
\family default
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://thomas-cokelaer.info/tutorials/python/boolean.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Boolsche Vergleiche von numpy-Arrays mit Wahrheitswerten (und = &,
 oder = |):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.array(range(1,10))
\end_layout

\begin_layout Plain Layout

y = (3<=x) & (x<7)
\end_layout

\begin_layout Plain Layout

z = (x<=3) | (7<x)
\end_layout

\begin_layout Plain Layout

print(y*x)
\end_layout

\begin_layout Plain Layout

print(z*x)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ergibt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[0 0 3 4 5 6 0 0 0]
\end_layout

\begin_layout Plain Layout

[1 2 3 0 0 0 0 8 9]
\end_layout

\end_inset


\end_layout

\begin_layout Section
Objektorientierung
\end_layout

\begin_layout Subsection
Klassen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:klassen"

\end_inset

Klassenvariablen sind in allen Objekten der Klasse gleich.
 Wird die Klassenvariable in einer Instanz (aka Objekt) geändert,
 ist sie auch in einer anderen Instanz geändert.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Kumpel:
\end_layout

\begin_layout Plain Layout

	alter = 18 # Klassenvariable
\end_layout

\begin_layout Plain Layout

	# Methoden:
\end_layout

\begin_layout Plain Layout

	def gruss(self):
 
\end_layout

\begin_layout Plain Layout

		print('Glueck Auf!')
\end_layout

\begin_layout Plain Layout

	pass
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mit der Instanzierung wird eine Instanz (ein Objekt) der Klasse gebildet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Maria = Kumpel()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Konstruktor (Es gibt in Python kein Überladen,
 also mehrere Funktionen gleichen Namens und unterschiedlichen Parametern) heißt 
\family typewriter
__init__
\family default
 und ermöglicht das Setzen von Instanzvariablen (Variablen die zu dem Objekt gehören):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Kumpel:
\end_layout

\begin_layout Plain Layout

	# Konstruktor:
\end_layout

\begin_layout Plain Layout

	def __init__(self,
 N,
 A=2):
 
\end_layout

\begin_layout Plain Layout

		self.Nachname = N
\end_layout

\begin_layout Plain Layout

		self.Arme = A
\end_layout

\begin_layout Plain Layout

	pass
\end_layout

\begin_layout Plain Layout

Maria = Kumpel('Schulz')
\end_layout

\begin_layout Plain Layout

Jo = Kumpel('Jo',
 3)
\end_layout

\begin_layout Plain Layout

print(Maria.Nachname) # 'Schulz' 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Optionale Parameter können mit Default-Werten angegeben werden.
 Wenn diese Parameter nicht angegeben werden,
 werden die Default-Werte verwendet.
\end_layout

\begin_layout Standard
Ein Objekt kann in einen String über die Funktion 
\family typewriter
__str__
\family default
 gewandelt werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Kumpel:
\end_layout

\begin_layout Plain Layout

  def __init__(self,
 N):
 
\end_layout

\begin_layout Plain Layout

    self.Nachname = N
\end_layout

\begin_layout Plain Layout

  def __str__(self):
\end_layout

\begin_layout Plain Layout

    return('Nachname = '
\backslash

\end_layout

\begin_layout Plain Layout

    + self.Nachname)
\end_layout

\begin_layout Plain Layout

  pass
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Maria = Kumpel('Schulz')
\end_layout

\begin_layout Plain Layout

print(Maria) # 'Schulz'
\end_layout

\end_inset


\end_layout

\begin_layout Section
Listen/Arrays/Datenstrukturen
\end_layout

\begin_layout Standard
Siehe auch Listen und Arrays bei Numpy im Abschnitt xxxx
\end_layout

\begin_layout Subsection
Range
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:range"

\end_inset

Die Funktion 
\family typewriter
range(k)
\family default
 liefert alle Zahlen zwischen 0 und k-1
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for k in range(3):
\end_layout

\begin_layout Plain Layout

	print(k) # 0,
 1,
 2
\end_layout

\end_inset


\end_layout

\begin_layout Section
Datenstrukturen
\end_layout

\begin_layout Subsection
Dictionarys
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:dictionarys"

\end_inset

Dictionarys sind eine Name-Wert-Datenstruktur.
 Die Werte können über den Namen ausgelesen werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mydict = {'alter':41,
 'groesse_cm':190,
 'Name':'Markus'}
\end_layout

\begin_layout Plain Layout

print(mydict['Name']) # 'Markus'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dictionarys können auch in Listen zusammengefasst sein:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mydict = []
\end_layout

\begin_layout Plain Layout

mydict.append({'alter':41,
 'groesse_cm':190,
 'Name':'Markus'})
\end_layout

\begin_layout Plain Layout

mydict.append({'alter':42,
 'groesse_cm':175,
 'Name':'Pascal'})
\end_layout

\begin_layout Plain Layout

print(len(mydict)) # 2
\end_layout

\begin_layout Plain Layout

print(mydict[0]['Name']) # 'Markus'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dictionary erweitern:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

my_dict = {"username":
 "XYZ"}
\end_layout

\begin_layout Plain Layout

my_dict['name']='Nick'
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tupel
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "tupel"

\end_inset

Tupel sind aneinandergehängte Elemente.
 Die Liste an Elementen kann im nachhinein nicht geändert werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

L = (1,
 2,
 3)
\end_layout

\begin_layout Plain Layout

print(L[0]) # 1
\end_layout

\begin_layout Plain Layout

L[0] = 7 # geht nicht
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Set
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "datentypset"

\end_inset

Sets sind im mathematischen Sinne Mengen.
 Ein Element kann nur einmal vorhanden sein.
 Die Reihenfolge ist nicht definiert
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

L = {1,
 2,
 3}
\end_layout

\begin_layout Plain Layout

print(len(L)) # Laenge,
 ergibt 3
\end_layout

\begin_layout Plain Layout

L.remove(2) # Fehler,
 wenn nicht vorhanden
\end_layout

\begin_layout Plain Layout

L.discard(3) # Kein Fehler,
 wenn nicht vorhanden
\end_layout

\begin_layout Plain Layout

print(L) #ergibt {3}
\end_layout

\begin_layout Plain Layout

L.union({4,
 5}) #ergibt {1,
 4,
 5}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arrays gleicher Länge zu Tupeln
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "zip"

\end_inset

Zwei Arrays gleicher Länge können zu einer Liste von Tupeln umgewandelt werden
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

A = [1,
 2,
 3]
\end_layout

\begin_layout Plain Layout

B = [10,
 9,
 8]
\end_layout

\begin_layout Plain Layout

C = zip(A,
 B)
\end_layout

\begin_layout Plain Layout

print(list(C))
\end_layout

\begin_layout Plain Layout

# [(1,
 10),
 (2,
 9),
 (3,
 8)]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arrays verbinden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:arraysverbinden"

\end_inset

Aneinanderhängen von Listen zu einer Gesamt-Liste
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

y = [1] + [2,
 3,
 4] + [5]
\end_layout

\begin_layout Plain Layout

# ergibt:
 [1,
 2,
 3,
 4,
 5]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Länge eines Arrays
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:laengearray"

\end_inset

Länge eines Arrays
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

y = [2,
 3,
 4]
\end_layout

\begin_layout Plain Layout

len(y)# ergibt:
 3
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
deep und shallow copy
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:deepshallowcopy"

\end_inset

Das erzeugen einer neuen Variablen erzeugt nicht zwangsläufig ein neues undabhängiges Objekt.
 Mit copy und deepcopy können flache und tiefe Kopien erstellt werden.
 Bei der flachen Kopie wird ein neues Objekt auf höchster Ebene erzeugt.
 Bei der tiefen Kopie werden alle verzweiten Objekte dupliziert.
 Beispiel:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import copy
\end_layout

\begin_layout Plain Layout

z = 666
\end_layout

\begin_layout Plain Layout

A = [z,
 2,
 3]
\end_layout

\begin_layout Plain Layout

B = A # zusaetzliche Variable fuer gleiches Objekt
\end_layout

\begin_layout Plain Layout

B[1]=42
\end_layout

\begin_layout Plain Layout

print(A) # ergibt [42,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print(B) # ergibt [42,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print((id(A),
 id(B),
 id(A[0]),
 id(B[0])))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

A = [z,
 2,
 3]
\end_layout

\begin_layout Plain Layout

B = copy.copy(A) # shallow copy
\end_layout

\begin_layout Plain Layout

B[1]=42
\end_layout

\begin_layout Plain Layout

print(A) # ergibt [42,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print(B) # ergibt [42,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print((id(A),
 id(B),
 id(A[0]),
 id(B[0])))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

A = [z,
 2,
 3]
\end_layout

\begin_layout Plain Layout

B = copy.deepcopy(A)
\end_layout

\begin_layout Plain Layout

B[0]=42
\end_layout

\begin_layout Plain Layout

print(A) # ergibt [1,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print(B) # ergibt [42,
 2,
 3]
\end_layout

\begin_layout Plain Layout

print((id(A),
 id(B),
 id(A[0]),
 id(B[0])))
\end_layout

\end_inset


\end_layout

\begin_layout Section
Strings (Zeichenketten)
\end_layout

\begin_layout Subsection
Strings aneinanderhängen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:stringsaneinanderhaengen"

\end_inset

Eine list von Strings zu einem einzigen String aneinanderhängen:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

neustr = 
\begin_inset Quotes pld
\end_inset


\begin_inset Quotes prd
\end_inset

.join([
\begin_inset Quotes pld
\end_inset

a
\begin_inset Quotes prd
\end_inset

,
 
\begin_inset Quotes pld
\end_inset

b
\begin_inset Quotes prd
\end_inset

,
 
\begin_inset Quotes pld
\end_inset

c
\begin_inset Quotes prd
\end_inset

])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternativ:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

neustr = 
\begin_inset Quotes pld
\end_inset

a
\begin_inset Quotes prd
\end_inset

 + 
\begin_inset Quotes pld
\end_inset

b
\begin_inset Quotes prd
\end_inset

 + 
\begin_inset Quotes pld
\end_inset

c
\begin_inset Quotes prd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Strings mit Trennstring aneinanderhängen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:stringsmittrennstringjoin"

\end_inset

Eine list von Strings zu einem einzigen String mit Trennstring aneinanderhängen:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

s = " kennt ".join(["Markus",
 "Maria",
 "Andrea"])
\end_layout

\begin_layout Plain Layout

print(s) # Markus kennt Maria kennt Andrea
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Strings formatieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:stringsformatieren"

\end_inset

Variablen und Textbausteine zu einem String zusammenbauen:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x = 5
\end_layout

\begin_layout Plain Layout

y = 7
\end_layout

\begin_layout Plain Layout

neustr = f
\begin_inset Quotes prd
\end_inset

x = {x},
 y ={y}
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Plain Layout

# ergibt 
\begin_inset Quotes prd
\end_inset

x = 5,
 y =7
\begin_inset Quotes prd
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Substrings extrahieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:substringsextrahieren"

\end_inset

Unter-Zeichenketten extrahieren.
 Mit den eckigen Klammern kann eine Startposition,
 Endposition und eine Schrittweite angegeben werden.
 Wird eine Zahl als Grenze ausgelassen,
 bedeutet das soviel wie 
\begin_inset Quotes pld
\end_inset

alle
\begin_inset Quotes prd
\end_inset

.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

zk = 'hallo welt'
\end_layout

\begin_layout Plain Layout

print(zk[0:5]) # hallo
\end_layout

\begin_layout Plain Layout

print(zk[0:5:2]) # hlo
\end_layout

\begin_layout Plain Layout

print(zk[4::-1]) # ollah
\end_layout

\begin_layout Plain Layout

print(zk[:-1]) # hallo wel
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Substring finden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:substringfinden"

\end_inset

Suchstring in einem anderen String finden.
 Das Ergebnis ist die Startposition des ersten gefundenen Substrings:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pos = 
\begin_inset Quotes pld
\end_inset

Hallo Welt
\begin_inset Quotes prd
\end_inset

.find(
\begin_inset Quotes pld
\end_inset

l
\begin_inset Quotes prd
\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
String in Int umformen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:stringtoint"

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

zahl = int(
\begin_inset Quotes pld
\end_inset

l23
\begin_inset Quotes prd
\end_inset

)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Int in String umformen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:stringtoint-1"

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

zahls = str(l23)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
float in String umformen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numbertostring"

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x=13.1415
\end_layout

\begin_layout Plain Layout

e =  'pi = {:f}'.format(x)
\end_layout

\begin_layout Plain Layout

s = 'pi = {0:1.2f}'.format(x)
\end_layout

\begin_layout Plain Layout

print(e) # 'pi = 13.141500'
\end_layout

\begin_layout Plain Layout

print(s) # 'pi = 13.14'
\end_layout

\begin_layout Plain Layout

# Integer-Wert
\end_layout

\begin_layout Plain Layout

print('Wert:
 {0:d}'.format(27828))
\end_layout

\begin_layout Plain Layout

# fuehrende Nullen:
\end_layout

\begin_layout Plain Layout

print('{:03d}'.format(7)) # 007
\end_layout

\begin_layout Plain Layout

# Scientific (nicht Eng.) Format:
\end_layout

\begin_layout Plain Layout

print(f'{0.000002342:.3E}') # 2.342E-6
\end_layout

\begin_layout Plain Layout

print(f'{0.000002342:E}') # 2.342000E-6
\end_layout

\end_inset


\end_layout

\begin_layout Section
Jupyter Lab
\end_layout

\begin_layout Subsection
Start von .ipynb-Dateien per Doppelklick (Windows)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:doppelklickstartwindows"

\end_inset

Jupyter Lab kann mit einem Doppelklick auf eine .ipynb-Datei gestartet werden,
 indem eine Batch-Datei zum Starten verwendet wird.
 Die Batch-Datei 
\family typewriter
jupyterlaboopenwith.bat
\family default
 hat folgenden Inhalt (
\family typewriter
UN
\family default
 steht für den Benutzernamen unter dem die Anaconda-Distribution zu finden ist):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

start C:
\backslash
Users
\backslash
UN
\backslash
anaconda3
\backslash
pythonw.exe ^
\end_layout

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
UN
\backslash
anaconda3
\backslash
cwp.py ^
\end_layout

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
UN
\backslash
anaconda3 "C:
\backslash
Users
\backslash
UN
\backslash
anaconda3/pythonw.exe" ^
\end_layout

\begin_layout Plain Layout

"C:
\backslash
Users
\backslash
UN
\backslash
anaconda3/Scripts/jupyter-lab-script.py"  %1 
\end_layout

\begin_layout Plain Layout

timeout 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Batch-Datei wird in einem leicht zu merkenden Verzeichnis gespeichert.
 Mit dem Kontext-Menü 
\begin_inset Quotes pld
\end_inset

Öffnen mit...
\begin_inset Quotes prd
\end_inset

 einer .ipynp-Datei im Windows-Explorer wird die Batch-Datei ausgewählt.
 Wenn anschließend mit einem Doppelklick auf eine .ipynb-Datei geklickt wird,
 öffnet sich automatisch Jupyter Lab mit dieser Datei.
\end_layout

\begin_layout Subsection
Zugriff auf andere Laufwerke (Windows)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:zugriffanderelaufwerke"

\end_inset

Wenn JupyterLab gestartet wurde,
 hat es ein bestimmtes Startverzeichnis erhalten.
 Notebook-Dateien können dabei nicht oberhalb oder außerhalb dieses Verzeichnisses gespeichert und geöffnet werden,
 nur in Unterverzeichnissen dieses Startverzeichnisses.
 Der Pfad des Startverzeichnisses wird nicht angezeigt,
 nur der Inhalt links in der Verzeichnisansicht.
\end_layout

\begin_layout Standard
Es kann ein alternatives Startverzeichnis und Startlaufwerk verwendet werden.
 Dazu wird im Anaconda-Browser eine Kommndozeile geöffnet (Anaconda Navigator 
\begin_inset Formula $\rightarrow$
\end_inset

 CMD.exe Prompt),
 dann in das gewünschte Laufwerk (beispielsweise 
\family typewriter
h:
\family default
) und das gewünschte Verzeichnis gewechselt (beispielsweise 
\family typewriter
cd MeineProjekte
\backslash
Masterarbeit
\family default
).
 Dann wird mit 
\family typewriter
jupyter lab
\family default
 die Entwicklungsumgebung gestartet.
\end_layout

\begin_layout Subsection
Hotkeys
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:hotkeys"

\end_inset


\end_layout

\begin_layout Itemize
Enter:
 Wechsle in den Zellenmodus (Zelle wird editiert)
\end_layout

\begin_layout Itemize
Esc:
 Beende den Zellenmodus (Zelle wird nicht mehr editiert)
\end_layout

\begin_layout Itemize
Strg + Enter:
 Führe aktuelle Zelle aus
\end_layout

\begin_layout Itemize
Eingabe griechischer Buchstaben:
 
\backslash
alpha tab für 
\begin_inset Formula $\alpha$
\end_inset


\end_layout

\begin_layout Subsection
Sinnvolle Extensions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:sinnvolleextenstions"

\end_inset


\end_layout

\begin_layout Itemize
jupyter-matplotlib.
 Dies ermöglicht ein 
\family typewriter
%matplotlib notebook
\family default

\begin_inset space \thinspace{}
\end_inset

erfordert das Paket ipympl.
 Danach in der Anaconda-Shell:
\end_layout

\begin_deeper
\begin_layout Itemize
jupyter labextension install @jupyter-widgets/jupyterlab-manager
\end_layout

\begin_layout Itemize
jupyter lab build
\end_layout

\end_deeper
\begin_layout Subsection
interact
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:interact"

\end_inset

Interact ermöglicht interaktive Berechnungen mit Auswahlfeldern und Zeigern:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from __future__ import print_function
\end_layout

\begin_layout Plain Layout

from ipywidgets import interact,
\backslash

\end_layout

\begin_layout Plain Layout

interactive,
 fixed,
 interact_manual 
\end_layout

\begin_layout Plain Layout

import ipywidgets as widgets
\end_layout

\begin_layout Plain Layout

def f(x):
 
\end_layout

\begin_layout Plain Layout

	return x*2
\end_layout

\begin_layout Plain Layout

interact(f,
 x=(0.0,10.0))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Funktionen mit mehreren Parametern:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

L = ['eins',
 'zwei']
\end_layout

\begin_layout Plain Layout

def f(A,
 B):
\end_layout

\begin_layout Plain Layout

	print(A)
\end_layout

\begin_layout Plain Layout

	print(B)
\end_layout

\begin_layout Plain Layout

	pass
\end_layout

\begin_layout Plain Layout

# Laesst den Benutzer fuer A einen
\end_layout

\begin_layout Plain Layout

# Wert aus der Liste L auswaehlen:
\end_layout

\begin_layout Plain Layout

interact(f,
 A=L,
 B=(0,2.0,0.1))
\end_layout

\begin_layout Plain Layout

# Uebergibt die gesamte Liste L an
\end_layout

\begin_layout Plain Layout

# den Parameter A:
\end_layout

\begin_layout Plain Layout

interact(f,A=fixed(L),
 B=(0,2.0,0.1))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Flickern interaktiver Grafiken verhindern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:flickernverhindern"

\end_inset

Am Ende der Funktion,
 die die Grafik erzeugt muss 
\family typewriter
clear_output(wait=true) 
\family default
stehen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from ipywidgets import interact,
 interactive,
 fixed,
 interact_manual
\end_layout

\begin_layout Plain Layout

import ipywidgets as widgets
\end_layout

\begin_layout Plain Layout

%matplotlib inline
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from IPython.display import clear_output
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

def f(x=0):
\end_layout

\begin_layout Plain Layout

	fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

	fig.set_size_inches(120/25.4,
 80/25.4)
\end_layout

\begin_layout Plain Layout

	wanderpunkt = plt.Circle((np.cos(x*2*math.pi),
 0),0.1)
\end_layout

\begin_layout Plain Layout

	ax.add_artist(wanderpunkt)
\end_layout

\begin_layout Plain Layout

	ax.set_xlim([-1.2,1.2])
\end_layout

\begin_layout Plain Layout

	ax.set_ylim([-0.8,0.8])
\end_layout

\begin_layout Plain Layout

	clear_output(wait=True)
\end_layout

\begin_layout Plain Layout

interact(f,
 x=(0.0,1.0,0.01))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Anzeigegröße von Grafiken ändern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:anzeigegroessegrafiken"

\end_inset

Wenn Grafiken beispielsweise mit Matplotlib erzeugt werden,
 haben sie eine Standardgröße,
 die recht klein ist.
 Sie kann wie folgt mit dem Parameter 
\family typewriter
dpi
\family default
 verändert werden (150 = groß):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from ipywidgets import interact,
 interactive,
 fixed,
 interact_manual 
\end_layout

\begin_layout Plain Layout

import ipywidgets as widgets 
\end_layout

\begin_layout Plain Layout

%matplotlib inline 
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl 
\end_layout

\begin_layout Plain Layout

from IPython.display import clear_output 
\end_layout

\begin_layout Plain Layout

mpl.rcParams['figure.dpi'] = 150
\end_layout

\end_inset


\end_layout

\begin_layout Section
VisualStudio Code (Jupyter Lab)
\end_layout

\begin_layout Subsection
Installation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:installationvcsjupyterlab"

\end_inset


\end_layout

\begin_layout Itemize
Im Anaconda -> cmd.exe Prompt -> 
\begin_inset Quotes pld
\end_inset

conda install ipykernel
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Standard
Informationen über den Kernel einholen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import sys
\end_layout

\begin_layout Plain Layout

print(sys.executable)
\end_layout

\begin_layout Plain Layout

print(sys.version)
\end_layout

\begin_layout Plain Layout

print(sys.version_info)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Besser:
 Statt Anaconda Miniconda installieren.
 In Miniconda sind nur wenige packages vorhanden.
 Diese können wie folgt installiert werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PS C:
\backslash
Users
\backslash
USERNAME
\backslash
appdata
\backslash
Local
\backslash
miniconda3
\backslash
Scripts>  .
\backslash
conda.exe install matplotlib
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Tastaturkürzel
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:tastaturkuerzel"

\end_inset


\end_layout

\begin_layout Itemize
Markierte Zelle -> y:
 Code-Zelle
\end_layout

\begin_layout Itemize
Markierte Zelle -> m:
 markdown-Zelle
\end_layout

\begin_layout Itemize
Alt + Enter:
 Zelle ausführen und neue Zelle hinzufügen
\end_layout

\begin_layout Itemize
Strg + Shift + Enter:
 Zelle ausführen
\end_layout

\begin_layout Itemize
F5:
 Starte Debugger
\end_layout

\begin_layout Itemize
F10:
 Nächster Schritt
\end_layout

\begin_layout Subsection
Neues Notebook anlegen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vscodenewnotebook"

\end_inset


\end_layout

\begin_layout Itemize
Strg + Shift + p (Eine Kommandozeile wird angezeigt)
\end_layout

\begin_layout Itemize
\begin_inset Quotes pld
\end_inset

Create:
 New Jupyter Notebook
\begin_inset Quotes prd
\end_inset


\family typewriter
 RET
\end_layout

\begin_layout Subsection
Mehrzeilige Formleln einfach editieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:mehrzeiligeformelnediteren"

\end_inset


\end_layout

\begin_layout Itemize
In LyX eine abgesetzte Formel erstellen und dort ein Array mit zwei Spalten anlegen
\end_layout

\begin_layout Itemize
Dieses markieren,
 kopieren und in die Markdown-Zelle einfügen
\end_layout

\begin_layout Itemize
In der Markdown-Zelle 
\begin_inset Quotes pld
\end_inset

Strg + RET
\begin_inset Quotes prd
\end_inset

 drücken,
 sodass die Zelle in eine Formel gewandelt wird.
\end_layout

\begin_layout Subsection
Sinnvolle Einstellungen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vscodejupyterlabsettings"

\end_inset

Unter File -> Preferences -> Settings wird nach 
\begin_inset Quotes pld
\end_inset

Scroll
\begin_inset Quotes prd
\end_inset

 gesucht.
 Im Bereich 
\begin_inset Quotes pld
\end_inset

Jupyter
\begin_inset Quotes prd
\end_inset

 gibt es die Einstellung 
\begin_inset Quotes pld
\end_inset

Jupyter:
 Always Scroll On New Cell
\begin_inset Quotes prd
\end_inset

.
 Dies sollte aktiviert sein.
 Damit zeigt das Ausgabefenster immer die letzten Ausgaben.
 Ein maunelles Scrollen zu den Ausgaben entfällt.
\end_layout

\begin_layout Standard
Weiterhin sollte eine Abfrage erscheinen,
 ob eine Datei gespeichert werden soll,
 wenn VSCode geschlossen wird und noch nicht gespeicherte Code-Dateien offen sind:
 File 
\begin_inset Formula $\rightarrow$
\end_inset

 Preferences 
\begin_inset Formula $\rightarrow$
\end_inset

 Setting 
\begin_inset Formula $\rightarrow$
\end_inset

 Text Editor 
\begin_inset Formula $\rightarrow$
\end_inset

 Hot Exit:
 Off.
\end_layout

\begin_layout Subsection
Standardkernel einstellen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:standardkerneleinstellen"

\end_inset

View -> Extensions -> Python -> RMB Extension Settings -> Python:
 Default Interpreter Path editieren.
 (Beispiel 
\family typewriter
C:
\backslash
Users
\backslash
UNAME
\backslash
anaconda3
\backslash
python.exe
\family default
)
\end_layout

\begin_layout Standard
(Oder auch 
\family typewriter
C:
\backslash
Users
\backslash
USERNAME
\backslash
AppData
\backslash
Local
\backslash

\end_layout

\begin_layout Standard

\family typewriter
Continuum
\backslash
anaconda3
\family default
)
\end_layout

\begin_layout Itemize
Etwas ungewöhnlich ist,
 dass der Standard-Kernel für die Jupyter Lab-extension in der Python extension eingestellt wird.
\end_layout

\begin_layout Section
VisualStudio Code (Python,
 iPython)
\end_layout

\begin_layout Subsection
iPython Zellen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ipythonzellen"

\end_inset


\end_layout

\begin_layout Standard
iPython-Zellen werden erzeugt,
 indem als Kommentar # %% zugefügt wird.
 Alles was danach kommt gehört zu einer Zelle.
 Eine Zelle wird ausgeführt,
 indem Strg+Ret gedrückt wird.
\end_layout

\begin_layout Standard
Die Zelle wird ausgeführt und eine neue Zelle erzeugt mit Shift + Ret.
\end_layout

\begin_layout Standard
Mit Alt+Ret wird die aktuelle Zelle nicht ausgeführt und eine neue Zelle erzeugt.
\end_layout

\begin_layout Subsection
iPython Variablen-Browser
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ipythonvariablebrowser"

\end_inset


\end_layout

\begin_layout Standard
Der Variablenbrowser wird angezeigt,
 indem der Cursor in das Interaktive Ausgabefenster (häufig 
\begin_inset Quotes pld
\end_inset

Interactive-1
\begin_inset Quotes prd
\end_inset

) auf 
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/022_ipythonvariablebrowser/ipythonvariablebrowser.png
	width 1cm

\end_inset

 geklickt wird.
 Alternativ:
 View -> open view -> 
\begin_inset Quotes pld
\end_inset

view variables
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Subsection
Debugger
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:debugger"

\end_inset

Wenn ein Haltepunkt gesetzt wurde und dann RMB 
\begin_inset Formula $\rightarrow$
\end_inset

 Edit Breakpoint...
 
\begin_inset Formula $\rightarrow$
\end_inset

 Log Message gewählt wurde,
 wird mit 
\family typewriter
Wert = {Variablenname}
\family default
 an der Stelle des Breakpoints der Wert der Variablen am Haltepunkt in der Debug-Console ausgegeben.
 Beispiel:
 
\family typewriter
Wert = 42
\family default
.
\end_layout

\begin_layout Subsection
Cursorposition Anzeigen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:cursorpositionstatusbar"

\end_inset

Die Cursorposition wird in der Status-Bar angezeigt.
 Sollte die Ausgeblendet sein,
 wird sie unter View->Apperance->Show Status Bar wieder angezeigt.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\family sans
\series bold
\size largest
Spyder/iPython
\end_layout

\begin_layout Subsection
Hotkeys
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:spyderhotkeys"

\end_inset

Spyder Hotkeys:
\end_layout

\begin_layout Plain Layout

\family typewriter
Strg + F5:
 Start debug
\end_layout

\begin_layout Plain Layout

\family typewriter
Strg + F10:
 Step
\end_layout

\begin_layout Plain Layout

\family typewriter
Strg + Umsch + F12:
 Stop debug
\end_layout

\begin_layout Plain Layout

\family typewriter
F12:
 Haltepunkt ein/aus
\end_layout

\begin_layout Plain Layout

\family typewriter
Strg + Umsch + E:
 Editor
\end_layout

\begin_layout Subsection
Variablenbrowser
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:variablenbrowser"

\end_inset

Variablen in Großbuchstaben werden standardmäßig ausgeblendet.
 Der Ausblendefilter ist unter 
\begin_inset Quotes pld
\end_inset

Optionen
\begin_inset Quotes prd
\end_inset

 in der rechten oberen Ecke erreichbar.
 Bei Änderungen des Anzeigefilters muss das der Programmcode einmal neu gestartet werden.
\end_layout

\begin_layout Subsection
Code-Sections,
 Abschnitte
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:codesections"

\end_inset

Der Code kann in Bereiche aufgeteilt werden.
 Der Anfang eines Bereiches wird mit 
\family typewriter
#%%
\family default
 gekennzeichnet.
 Der Bereich endet am Anfang des folgenden Bereiches,
 welcher wieder mit 
\family typewriter
#%%
\family default
 beginnt.
\end_layout

\begin_layout Subsection
Alle Variablen Löschen
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:allevariablenloeschen"

\end_inset

Mit 
\family typewriter
%reset
\family default
 werden alle Variablen gelöscht.
 Dabei wird aber noch eine Benutzerabfrage getätigt,
 ob das auch beabsichtigt ist.
 Mit 
\family typewriter
%reset -f
\family default
 wird diese Abfrage übergangen.
\end_layout

\begin_layout Subsection
Start in der Konsole
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:konsolenstart"

\end_inset

Start eines Python-Programms mit dem Dateinamen pyf.py aus der Konsole (Anaconda):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C:
\backslash
PFAD
\backslash
anaconda3
\backslash
python.exe pyf.py
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Der Pfad ist typischerweise Users
\backslash
Benutzername
\end_layout

\begin_layout Plain Layout
Unter Umständen muss vorher eine Conda-Umgebung aktiviert werden.
 In einer Batch-Datei wird die Conda-Umgebung wie folgt aktiviert und ein Python-Programm gestartet:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

call "c:
\backslash
Users
\backslash
USERNAME
\backslash
anaconda3
\backslash
condabin
\backslash
activate.bat" base 
\end_layout

\begin_layout Plain Layout

python.exe PythonDatei.py
\end_layout

\begin_layout Plain Layout

call conda deactivate
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Programm explizit beenden
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:programmbeenden"

\end_inset

Innerhalb eines Python-Programms kann ein Beenden der Ausführung explizit angegeben werden
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

quit()
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Programmzeilen danach werden nicht mehr ausgeführt.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.geeksforgeeks.org/python-exit-commands-quit-exit-sys-exit-and-os-_exit/
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Start von .py-Dateien mit Spyder per Doppelklick (Windows)
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:doppelklickstartwindowsspyder"

\end_inset

Spyder kann mit einem Doppelklick auf eine .py-Datei gestartet werden,
 indem eine Batch-Datei zum Starten verwendet wird.
 Die Batch-Datei 
\family typewriter
spyderopenwith.bat
\family default
 hat folgenden Inhalt (
\family typewriter
UN
\family default
 steht für den Benutzernamen unter dem die Anaconda-Distribution zu finden ist):
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

start C:
\backslash
Users
\backslash
USER
\backslash
anaconda3
\backslash
pythonw.exe C:
\backslash
Users
\backslash
USER
\backslash
anaconda3
\backslash
cwp.py C:
\backslash
Users
\backslash
USER
\backslash
anaconda3 "C:
\backslash
Users
\backslash
USER
\backslash
anaconda3/pythonw.exe" "C:
\backslash
Users
\backslash
USER
\backslash
anaconda3/Scripts/spyder-script.py"  %1
\end_layout

\begin_layout Plain Layout

timeout 3
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Die Batch-Datei wird in einem leicht zu merkenden Verzeichnis gespeichert.
 Mit dem Kontext-Menü 
\begin_inset Quotes pld
\end_inset

Öffnen mit...
\begin_inset Quotes prd
\end_inset

 einer .py-Datei im Windows-Explorer wird die Batch-Datei ausgewählt.
 Wenn anschließend mit einem Doppelklick auf eine .py-Datei geklickt wird,
 öffnet sich automatisch Spyder mit dieser Datei.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Dateien
\end_layout

\begin_layout Subsection
Textdateien zeilenweise lesen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:textdateienlesen"

\end_inset

Textdateien können ohne zusätzliche importierte Module gelesen werden ('r' für 'read'):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fd = open("Datei.lyx",
 'r')
\end_layout

\begin_layout Plain Layout

print(fd.readline()) # zeige Zeile 1
\end_layout

\begin_layout Plain Layout

fd.close()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Textdateien zeilenweise schreiben
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:textdateenschreiben"

\end_inset

Textdateien können ohne zusätzliche importierte Module gelesen werden ('w' für 'write'):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fd = open("Datei.txt",
 'w') # 'a' fuer anhaengen/append
\end_layout

\begin_layout Plain Layout

fd.write('Hallo Welt
\backslash
n')
\end_layout

\begin_layout Plain Layout

fd.close()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Textdateien ganz lesen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:textdateienlesen-1"

\end_inset

Textdateien können ohne zusätzliche importierte Module gelesen werden ('r' für 'read') in einen String eingelesen werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fd = open("Testdatei.text",
 'r')
\end_layout

\begin_layout Plain Layout

inhalt = fd.read() # Lese Datei
\end_layout

\begin_layout Plain Layout

fd.close()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Über alle Zeilen iterieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ueberzeileniterieren"

\end_inset

Textdateien können ohne zusätzliche importierte Module gelesen werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fd = open("Datei.lyx",
 'r')
\end_layout

\begin_layout Plain Layout

for line in fd:
\end_layout

\begin_layout Plain Layout

    print(line) # zeige Zeile
\end_layout

\begin_layout Plain Layout

fd.close()
\end_layout

\end_inset


\end_layout

\begin_layout Section
SQLite-Datenbank
\end_layout

\begin_layout Subsection
Daten abfragen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:datenabfragen"

\end_inset

Daten aus einer SQLite-Datenbank abfragen:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import sqlite3
\end_layout

\begin_layout Plain Layout

con = sqlite3.connect("Moduldaten.db")
\end_layout

\begin_layout Plain Layout

cur = con.cursor()
\end_layout

\begin_layout Plain Layout

res = cur.execute("SELECT Spalte1,
 Spalte2 from Tabelle;")
\end_layout

\begin_layout Plain Layout

print(res.fetchone()) #gibt das erste aus
\end_layout

\begin_layout Plain Layout

print(res.fetchall()) #gibt den Rest aus
\end_layout

\begin_layout Plain Layout

# [('a','b'),
 ('c','d'),('e','f')...]
\end_layout

\begin_layout Plain Layout

con.close()
\end_layout

\end_inset


\end_layout

\begin_layout Section
Systemzugriff
\end_layout

\begin_layout Subsection
Dateiname des Programms
\begin_inset Note Note
status open

\begin_layout Plain Layout
Programname
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:dateinamedesprogramms"

\end_inset

Der Dateiname des Python-Programms (Funktioniert nicht mit iPython & Jupyter) wird wie folgt ermittelt:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

print(__file__) # ganzer Pfad
\end_layout

\begin_layout Plain Layout

# Nur Dateiname (programm.py):
\end_layout

\begin_layout Plain Layout

print(os.path.basename(__file__))
\end_layout

\begin_layout Plain Layout

# Pfad des Programms:
\end_layout

\begin_layout Plain Layout

print(os.path.dirname(__file__))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mit Jupyter wird folgender Code zur Ermittlung des Programmnamens verwendet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

print(os.path.basename(sys.argv[0]))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sound/Wave/Audio ausgebem
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:soundwaveaudioausgabe"

\end_inset

Ausgabe eines Audiosignales,
 welches auf einer Funktion beruht (Funktioniert mit iPython & Jupyter):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#%%
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from IPython.display import Audio
\end_layout

\begin_layout Plain Layout

from math import pi
\end_layout

\begin_layout Plain Layout

fsample = 44000 # Abtastfrequenz
\end_layout

\begin_layout Plain Layout

f1 = 440
\end_layout

\begin_layout Plain Layout

f2 = 441
\end_layout

\begin_layout Plain Layout

tmax = 5 #Maximaldauer
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,tmax,tmax*fsample)
\end_layout

\begin_layout Plain Layout

wave_audio = 0.2*(np.cos(2*pi*f1*t)+np.cos(2*pi*f2*t))
\end_layout

\begin_layout Plain Layout

Audio(wave_audio,
 rate=fsample)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Datum und Zeit
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:datumundzeit"

\end_inset

Ausgabe eines ISO-Zeitstempels#%%
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import datetime print(datetime.datetime.now(
\end_layout

\begin_layout Plain Layout

   datetime.timezone.utc).strftime("%Y-%m-%d %H:%M Uhr")) 
\end_layout

\begin_layout Plain Layout

# erzeugt 2024-10-30 20:15 Uhr 
\end_layout

\begin_layout Plain Layout

print(datetime.datetime.now().isoformat())
\end_layout

\begin_layout Plain Layout

# erzeugt 2024-10-30T17:48:16.600919
\end_layout

\end_inset


\end_layout

\begin_layout Section
Mathematische Funktionen
\end_layout

\begin_layout Subsection
Fakultät (x!)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:fakultaet"

\end_inset

Die Faktultät einer ganzen Zahl ist das Produkt aller Zahlen von 1 bis zu dieser Zahl:
\begin_inset Formula 
\[
n!=1\cdot2\cdot3\cdot\dots\cdot\left(n-2\right)\cdot\left(n-1\right)\cdot n
\]

\end_inset


\end_layout

\begin_layout Standard
Beispiel:
 
\begin_inset Formula 
\[
7!=1\cdot2\cdot3\cdot4\cdot5\cdot6\cdot7=5040
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

print(math.factorial(5)) # 5!
 = 120
\end_layout

\begin_layout Plain Layout

# oder
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

print(np.math.factorial(5))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
arctan2
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:arctan2"

\end_inset

Der Winkel eines Zeigers auf eine Koordinate mit x- und y-Anteil,
 kann mit der Funktion 
\family typewriter
arctan2
\family default
 berechnet werden.
 Diese Funtkioniert in jedem Quadranten.
 Das folgende Code-Beispiel zeigt die Berechnung des Winkels des Zeigers auf die Koordinate (-3;-3).
 Das Ergebnis liegt im Bogenmaß vor.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

phi = arctan2(-3,-3)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Exponentialfunktion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:exponentialfunktion"

\end_inset

Die Funktion 
\begin_inset Formula $10^{x}$
\end_inset

 kann über 2 Varianten berechnet werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = 3
\end_layout

\begin_layout Plain Layout

a = np.power(10,
 x)
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

b = math.pow(10,
 x)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Numpy/Numerik
\end_layout

\begin_layout Subsection
Numpy Array erzeugen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numpyarrayerzeugen"

\end_inset

Numpy Array erzeugen aus einem normalen Array
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.array([1,
 2,
 3])
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Numpy Arrays verbinden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numpyarrayerzeugen-1"

\end_inset

Mehrere Numpy-Arrays konnen wie folgt zu einem gemeinsamen Numpy-Array verbunden werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.concatenate([np.array([1]),
 np.array([2,
 3,
 4]),
 np.array([5])])
\end_layout

\begin_layout Plain Layout

# ergibt array([1,
 2,
 3,
 4,
 5])
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Numpy Matrix aus Vektoren,
 vertikal
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numpymatrixausvektoren"

\end_inset

Mehrere Numpy-2D-Arrays konnen wie folgt zu einer gemeinsamen Numpy-Matrix verbunden werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

hv1 = np.array([11,
 12,
 13])
\end_layout

\begin_layout Plain Layout

hv2 = np.array([21,
 22,
 23])
\end_layout

\begin_layout Plain Layout

Mh = np.vstack((hv1,
 hv2))
\end_layout

\begin_layout Plain Layout

# ergibt:
 [[11 12 13]
\end_layout

\begin_layout Plain Layout

           [21 22 23]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Numpy Matrix aus Vektoren,
 horizontal
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numpymatrixausvektorenhor"

\end_inset

Mehrere Numpy-2D-Arrays konnen wie folgt zu einer gemeinsamen Numpy-Matrix nebeneinander verbunden werden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

v1 = [[11],
 [21],
 [31]]
\end_layout

\begin_layout Plain Layout

v2 = [[12],
 [22],
 [32]]
\end_layout

\begin_layout Plain Layout

# Argument als Tupel mit ( ...
 )
\end_layout

\begin_layout Plain Layout

# Die Argumente werden automatisch
\end_layout

\begin_layout Plain Layout

# zu np.arrays gemacht
\end_layout

\begin_layout Plain Layout

Mh = np.hstack((v1,
 v2)) 
\end_layout

\begin_layout Plain Layout

# ergibt:
 [[11 12]
\end_layout

\begin_layout Plain Layout

           [21 22]
\end_layout

\begin_layout Plain Layout

           [31 32]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray 1 D adressieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparrayadressieren"

\end_inset

Ein eindimensionales Numpy-Array (Liste von Zahlenwerten) hat im Gegensatz zum normalen Array mehr Anwendungsmöglichkeiten.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.arange(0,7)
\end_layout

\begin_layout Plain Layout

print(x)
\end_layout

\begin_layout Plain Layout

# ergibt [0 1 2 3 4 5 6 7]
\end_layout

\begin_layout Plain Layout

print(x[1:4]) #1 bis 3,
 4 fehlt
\end_layout

\begin_layout Plain Layout

print(x[1:]) # 1 bis ende
\end_layout

\begin_layout Plain Layout

print(x[:-2]) # ohne letzte 2
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray 1 D Differenzen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparrayadifferenzen"

\end_inset

Differenzen zwischen Werten in einem Numpy-Array berechnnen:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.array([0,
 1,
 3,
 4,
 5])
\end_layout

\begin_layout Plain Layout

print(np.diff(x))
\end_layout

\begin_layout Plain Layout

# ergibt [1 2 1 1]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Das Ergebnis hat ein Element weniger als das Argument der Funktion 
\family typewriter
diff
\family default
.
\end_layout

\begin_layout Subsection
Numpy arrays
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numpyarray"

\end_inset

Verschiedene Methoden zur Arrayerzeugung:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

a = np.array([0,
 1,
 3,
 4,
 5])
\end_layout

\begin_layout Plain Layout

# Start,
 Stop,
 Schrittweite:
\end_layout

\begin_layout Plain Layout

b = np.arange(-3,4,0.5) 
\end_layout

\begin_layout Plain Layout

# Start,
 Stop,
 Anzahl Zahlen
\end_layout

\begin_layout Plain Layout

c = np.linspace(-3,4,100)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray 2 D
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparray"

\end_inset

Ein zweidimensionales Numpy-Array hat im Gegensatz zum normalen Array mehr Anwendungsmöglichkeiten (Transponieren,
 Matrizenmulitplikation) und wird mit folgendem Code erzeugt:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

A = np.array([[11,
 12,
 13],
\backslash

\end_layout

\begin_layout Plain Layout

  [21,
 22,
 23]])
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray Größe
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparraygroesse"

\end_inset

Gesamtzahl der Elemente in einem Array und Anzahl Zeilen und Spalten
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.array([[11,
 12],
 [21,
 22],
 [31,
 32]])
\end_layout

\begin_layout Plain Layout

print(x.shape) # ergibt (3,
 2)(Zeilen,
 Spalten)
\end_layout

\begin_layout Plain Layout

print(x.size) # ergibt 6
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray transponieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparraytransponieren"

\end_inset

Ein Numpy-Array wird folgendermaßen transponiert::
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

A = np.array([[11,
 12,
 13],
\backslash

\end_layout

\begin_layout Plain Layout

  [21,
 22,
 23]])
\end_layout

\begin_layout Plain Layout

B = A.transpose()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Inverse Matrix (Matrix invertieren)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:matrixinvertieren"

\end_inset

Eine quadratische Matrix wird wie folgt invertiert:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

X = np.array([[2,
 3],
 [3,
 4]])
\end_layout

\begin_layout Plain Layout

X_inv = np.linalg.inv(X)
\end_layout

\begin_layout Plain Layout

# ergibt [[-4,
 3],
 [3,
 -2]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pseudoinverse einer Matrix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pseudoinverse"

\end_inset

Eine quadratische Matrix wird wie folgt invertiert:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

X = np.array([[2,
 3],
 [3,
 4],
 [4,
 6]])
\end_layout

\begin_layout Plain Layout

np.linalg.pinv(X)
\end_layout

\begin_layout Plain Layout

# ergibt [[-0.8,
 3,
 -1.6],
 [0.6,
 -2,
 1.2]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
nparray umdrehen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:nparrayumdrehen"

\end_inset

Die Reihenfolge aller Element ein einem numpy-array wird umgedreht:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

A = np.flip(np.array([1,
 2,
 3])) # [3,
 2,
 1]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lineares Gleichungssystem lösen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:lgsloesen"

\end_inset

Ein lineares Gleichungssystem in Matrizenschreibweise 
\begin_inset Formula 
\[
\left(\begin{array}{ccc}
1 & 3 & -5\\
-4 & 0 & -4\\
-3 & 0 & -1
\end{array}\right)\,\left(\begin{array}{c}
x\\
y\\
z
\end{array}\right)=\left(\begin{array}{c}
2\\
-3\\
-3
\end{array}\right)
\]

\end_inset

wird wie folgt gelöst:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

M = np.array([[1,
 3,
 -5],
\backslash
 
\end_layout

\begin_layout Plain Layout

   [-4,
 0,
 -4],[-3,
 0,
 -1]])
\end_layout

\begin_layout Plain Layout

b = np.array([[2],[-3],[-3]])
\end_layout

\begin_layout Plain Layout

x = np.linalg.solve(M,b)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Polynomdivision
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:polynomdivision"

\end_inset

Eine Polynomdivision wird wie folgt mit der Bibliothek numpy durchgeführt.
 Beispiel:
\begin_inset Formula 
\[
\frac{2\,x^{5}-11\,x^{4}+18\,x^{3}-20\,x^{2}+56\,x-65}{x^{3}-7\,x^{2}+16\,x-12}
\]

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

# Zaehlerkoeffizienten:
\end_layout

\begin_layout Plain Layout

Z = np.array([2,
 -11,
 18,
 -20,
 56,
 -65])
\end_layout

\begin_layout Plain Layout

# Nennerkoeffizienten:
 
\end_layout

\begin_layout Plain Layout

N = np.array([1,
 -7,
 16,
 -12])
\end_layout

\begin_layout Plain Layout

E = np.polydiv(Z,
 N)
\end_layout

\begin_layout Plain Layout

print(E) # ergibt (array([2.,
 3.,
 7.]),
 array([  5.,
 -20.,
  19.]))
\end_layout

\begin_layout Plain Layout

def pl(kp):
\end_layout

\begin_layout Plain Layout

    if kp == 0:
\end_layout

\begin_layout Plain Layout

        return("")
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        return(" + ")
\end_layout

\begin_layout Plain Layout

A = "".join([pl(k)+"("+str(E[0][k])+")*x^"+str(len(E[0])-k-1) for k in range(len(E[0]))])
\end_layout

\begin_layout Plain Layout

B = "".join([pl(k)+"("+str(E[1][k])+")*x^"+str(len(E[1])-k-1) for k in range(len(E[1]))])
\end_layout

\begin_layout Plain Layout

C = "".join([pl(k)+"("+str(N[k])+")*x^"+str(len(N)-k-1) for k in range(len(N))])
\end_layout

\begin_layout Plain Layout

print( A +" + ("+B+")/("+C+")" )
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergebnis:
\begin_inset Formula 
\[
2\,x^{2}+3\,x+7+\frac{5\,x^{2}-20\,x+19}{x^{3}-7\,x^{2}+16\,x-12}
\]

\end_inset


\end_layout

\begin_layout Subsection
Integrale (Trapezregel)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:integraletrapezregel"

\end_inset

Wenn eine Kurve in x-y-Koordinaten vorliegt,
 kann mit der Trapezregel die Fläche berechnet werden.
 Beispiel Halbkreis:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import scipy.integrate
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,3.14159265,10000)
\end_layout

\begin_layout Plain Layout

x = np.cos(t)
\end_layout

\begin_layout Plain Layout

y = np.sin(t)
\end_layout

\begin_layout Plain Layout

# Achtung:
 zuerst y,
 dann x:
\end_layout

\begin_layout Plain Layout

A = scipy.integrate.trapz(y,x)
\end_layout

\begin_layout Plain Layout

print(A*2) # = -pi 
\end_layout

\begin_layout Plain Layout

# -pi,
 weil die x-werte absteigend
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Potenz einer Matrix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:potenzeinermatrix"

\end_inset

Einzelne Elemnte einer Matrix oder ganze Zeilen oder Spalten können folgendermaßen manipuliert werden.
 Beispiel
\begin_inset Formula 
\[
\left(\!\!\begin{array}{ccc}
1 & 0 & 0\\
0 & 2 & 0\\
0 & 0 & 3
\end{array}\!\!\right)\!\cdot\!\left(\!\!\begin{array}{ccc}
1 & 0 & 0\\
0 & 2 & 0\\
0 & 0 & 3
\end{array}\!\!\right)\!\cdot\!\left(\!\!\begin{array}{ccc}
1 & 0 & 0\\
0 & 2 & 0\\
0 & 0 & 3
\end{array}\!\!\right)\!=\!\left(\!\!\begin{array}{ccc}
1 & 0 & 0\\
0 & 2 & 0\\
0 & 0 & 3
\end{array}\!\!\right)^{\!\!3}
\]

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

e=np.array([[1,0,0],[0,2,0],[0,0,3]])
\end_layout

\begin_layout Plain Layout

ep=np.linalg.matrix_power(e,3)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integral einer Funktion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:intragraleinerfunktion"

\end_inset

Wenn eine Funktion gegeben ist,
 kann mit numerisch das Integral berechnet werden:
 Beispiel 
\begin_inset Formula $\int_{x=0}^{4}x^{2}\,\mathrm{d}x$
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

y = lambda x:x**2
\end_layout

\begin_layout Plain Layout

integrate.quad(y,0,4)[0]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Erhöhte Genauigkeit wird wie folgt erreicht (parameter epsabs und epsrel,
 keine Zahl = große Genauigkeit):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

y = lambda x:x**2
\end_layout

\begin_layout Plain Layout

integrate.quad(y,0,4,epsabs=1.49e-13,
 epsrel=1.49e-13)[0]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Zweidimensionales Integral
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "zweidimensionalesintegral"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.dblquad.html
\end_layout

\end_inset

Mehrfachintegral am Beispiel:
\begin_inset Formula 
\[
R=\int_{a=2}^{5}\int_{b=\sin\left(a\right)}^{a^{2}}a\cdot b\,\mathrm{d}b\,\mathrm{d}a
\]

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def bunten(apar):
\end_layout

\begin_layout Plain Layout

    return(np.sin(apar))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def boben(apar):
\end_layout

\begin_layout Plain Layout

    return(apar**2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# der erste Parameter ist die Integrationsvariable des inneren Integrals
\end_layout

\begin_layout Plain Layout

def ing(bpar,
 apar):
\end_layout

\begin_layout Plain Layout

    return(apar*bpar)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

R = integrate.dblquad(ing,
 2,
 5,
 bunten,
\end_layout

\begin_layout Plain Layout

  boben,
 epsabs=1.5e-8,
 epsrel=1.5e-8)[0]
\end_layout

\begin_layout Plain Layout

print(R) # ergibt 1293.96
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integral einer komplexwertigen Funktion
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:intragraleinerkmpxfkt"

\end_inset

Das Integral einer komplexwertigen Funktion wird gebildet,
 indem Realteil und der Imaginäteil getrennt voneinander integriert werden:
 
\begin_inset Formula $\int_{t=0}^{2}\mathrm{e}^{\mathrm{j}\,\pi\,t}\,\mathrm{d}t=\int_{t=0}^{2}\mathrm{Re}\left(\mathrm{e}^{\mathrm{j}\,\pi\,t}\right)\,\mathrm{d}t+\mathrm{j}\,\int_{t=0}^{2}\mathrm{Im}\left(\mathrm{e}^{\mathrm{j}\,\pi\,t}\right)\,\mathrm{d}t$
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

y_re=lambda x:
 np.real(
\backslash
 
\end_layout

\begin_layout Plain Layout

  np.exp(1j*math.pi*x))
\end_layout

\begin_layout Plain Layout

y_im=lambda x:
 np.imag(
\backslash

\end_layout

\begin_layout Plain Layout

  np.exp(1j*math.pi*x))
\end_layout

\begin_layout Plain Layout

z = integrate.quad(y_re,0,2)[0]+
\backslash

\end_layout

\begin_layout Plain Layout

  1j*integrate.quad(y_im,0,2)[0]
\end_layout

\begin_layout Plain Layout

print(z)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Dreifachintegral
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:dreifachintegral"

\end_inset

Das Integral:
 
\begin_inset Formula $I=\int_{z=0}^{9}\int_{\varphi=\frac{-\pi}{6}}^{\frac{\pi}{6}}\int_{r=\cos\left(\varphi\right)}^{7}r^{3}\,7\,\mathrm{d}r\,\mathrm{d}\varphi\,\mathrm{d}z$
\end_inset

 wird wie folgt berechnet:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

from math import pi,
 cos
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

def integrant(r,
 phi,
 z):
\end_layout

\begin_layout Plain Layout

    return(r**3)*7
\end_layout

\begin_layout Plain Layout

E,F=integrate.tplquad(integrant,0,9,
\backslash

\end_layout

\begin_layout Plain Layout

  lambda z:-pi/6,
 lambda z:
 pi/6,
\backslash

\end_layout

\begin_layout Plain Layout

  lambda z,
 phi:
 cos(phi),
\backslash

\end_layout

\begin_layout Plain Layout

  lambda z,
 phi:
 7)
\end_layout

\begin_layout Plain Layout

print(E) # Ergebnis
\end_layout

\begin_layout Plain Layout

print(F) # Fehler
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
DGL 1.
 Ordnung numerisch lösen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:dglnumerisch"

\end_inset

Lösung der DGL 
\begin_inset Formula $y'=2\,t\,y+5\,t$
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.integrate import solve_ivp
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

#Reihenfolge wichtig:
 erst t dann y!
\end_layout

\begin_layout Plain Layout

def dydt(t,y):
 
\end_layout

\begin_layout Plain Layout

    retval =  2*t*y + 5*t
\end_layout

\begin_layout Plain Layout

    return(retval)
\end_layout

\begin_layout Plain Layout

tend=0.017
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,tend,100)
\end_layout

\begin_layout Plain Layout

s=solve_ivp(dydt,
 [0,
 tend],
 [3],
 t_eval=t,
 rtol=1e-9)
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

fig,
 ax = mpl.subplots()
\end_layout

\begin_layout Plain Layout

ax.plot(s.t,
 s.y[0])
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

ax.set_ylim([0,50])
\end_layout

\begin_layout Plain Layout

yana = 11/2*np.exp(t**2)-5/2
\end_layout

\begin_layout Plain Layout

ax.plot(t,
 yana,
 'rx')
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Faktorisierung eines Polynoms
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:polynomfaktorisierung"

\end_inset

Faktorisierung eines Polynoms am Beispiel 
\begin_inset Formula $f\left(x\right)=x^{4}+4\,x^{2}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

y = factor(x**4+4*x**2)
\end_layout

\begin_layout Plain Layout

print(y)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Einheitsmatrix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:einheitsmatrix"

\end_inset

Einheitsmatrix
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

# Datentyp float (1.0):
\end_layout

\begin_layout Plain Layout

e = np.eye(4)
\end_layout

\begin_layout Plain Layout

# Datentyp int (1):
\end_layout

\begin_layout Plain Layout

eint = np.eye(4,
 dtype=int)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Determinante
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:determinante"

\end_inset

Berechnung der Determinante einer Matrix
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

M = [[ 4,
  2],
\backslash

\end_layout

\begin_layout Plain Layout

     [ 3,
 -2]]
\end_layout

\begin_layout Plain Layout

print(np.linalg.det(M))
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Elementmanipulation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:elementmanipulation"

\end_inset

Einzelne Elemnte einer Matrix oder ganze Zeilen oder Spalten können folgendermaßen manipuliert werden
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

e = eye(3) # Matrix erzeugen
\end_layout

\begin_layout Plain Layout

e[:,3]=7 # dritte Spalte alle 7
\end_layout

\begin_layout Plain Layout

e[3,:]=7 # dritte Zeile alle 7
\end_layout

\begin_layout Plain Layout

e[0:2,:]=7 # erste zwei Zeilen 7
\end_layout

\begin_layout Plain Layout

# Die Auswahl betrifft alle
\end_layout

\begin_layout Plain Layout

# bis zur 2.
 Zeile
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Matrizenmultiplikation
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:matrizenmulitplikation"

\end_inset

Zwei Matrizen können mit den folgenden drei Methoden multipliziert werden (Es gibt noch mehr.):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

a = np.array([[1,
 2],[3,
 4]])
\end_layout

\begin_layout Plain Layout

amala1 = np.matmul(a,a)
\end_layout

\begin_layout Plain Layout

amala2 = a@a
\end_layout

\begin_layout Plain Layout

amala3 = a.dot(a)
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Vektoren und Matrizen aneinanderhängen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vektorenundmatrizenaneinanderhaengen"

\end_inset

Die Matrix 
\begin_inset Formula $\left(\begin{array}{cc}
11 & 12\\
21 & 22\\
31 & 32
\end{array}\right)$
\end_inset

 und der Vektor 
\begin_inset Formula $\left(\begin{array}{c}
13\\
23\\
33
\end{array}\right)$
\end_inset

 werden folgendermaßen aneinandergehangen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

a = np.array([[11,
 12],
\backslash

\end_layout

\begin_layout Plain Layout

   [21,
 22],
 [31,
 32]])
\end_layout

\begin_layout Plain Layout

b = np.array([[13],
 [23],
 [33]])
\end_layout

\begin_layout Plain Layout

print(np.c_[a,b])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergebnis:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[[11 12 13]
\end_layout

\begin_layout Plain Layout

 [21 22 23]
\end_layout

\begin_layout Plain Layout

 [31 32 33]]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die Matrix 
\begin_inset Formula $\left(\begin{array}{cc}
11 & 12\\
21 & 22
\end{array}\right)$
\end_inset

 und der Vektor 
\begin_inset Formula $\left(\begin{array}{cc}
31 & 32\end{array}\right)$
\end_inset

 werden untereinander folgendermaßen aneinandergehangen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

a = np.array([[11,
 12],
 [21,
 22]])
\end_layout

\begin_layout Plain Layout

b = np.array([[31,
 32]])
\end_layout

\begin_layout Plain Layout

print(np.r_[a,b])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergebnis:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[[11 12]
\end_layout

\begin_layout Plain Layout

 [21 22]
\end_layout

\begin_layout Plain Layout

 [31 32]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
XY-Matrizen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:xymatrizen"

\end_inset

Im Berereich Datenvisualisierung benötigt man gelegentlich zwei Matrizen gleicher Größe,
 die jeweils x- und y-Koordinaten angeben.
 Diese können mit dem Befehl 
\family typewriter
meshgrid
\family default
 erzeugt werden.
 Der Vektor 
\family typewriter
yv
\family default
 muss dabei in fallender Richtung (erste Grenze größer als die zweite) und der Vektor 
\family typewriter
xv
\family default
 in steigender Richtung (erste Grenze kleiner als die zweite) erzeugt werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

xv=np.linspace(2,4,3)
\end_layout

\begin_layout Plain Layout

yv=np.linspace(2,-2,5)
\end_layout

\begin_layout Plain Layout

Mx,My=np.meshgrid(xv,yv)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergebnisse:
 
\begin_inset Formula 
\[
\vec{x}=\left(\begin{array}{ccc}
2 & 3 & 4\end{array}\right)\quad\vec{y}=\left(\begin{array}{ccccc}
2 & 1 & 0 & -1 & -2\end{array}\right)
\]

\end_inset


\begin_inset Formula 
\[
\vec{\vec{X}}=\left(\begin{array}{ccc}
2 & 3 & 4\\
2 & 3 & 4\\
2 & 3 & 4\\
2 & 3 & 4\\
2 & 3 & 4
\end{array}\right)\quad\vec{\vec{Y}}=\left(\begin{array}{ccc}
2 & 2 & 2\\
1 & 1 & 1\\
0 & 0 & 0\\
-1 & -1 & -1\\
-2 & -2 & -2
\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Zufallszahlen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:zufallszahlen"

\end_inset

Integer Zufallszahl zwischen 1 und 90
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import random
\end_layout

\begin_layout Plain Layout

z = random.randint(1,90)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Startwert-seed für den Zufallsgenerator setzten.
 Die danach erzeugten Zufallszahlen sehen immer gleich aus.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import random
\end_layout

\begin_layout Plain Layout

random.seed(1)
\end_layout

\begin_layout Plain Layout

z = random.randint(1,90)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Reelle Zufallszahl zwischen 0,0 und 1,0
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import random
\end_layout

\begin_layout Plain Layout

random.seed(1)
\end_layout

\begin_layout Plain Layout

z = random.rand()
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $7$
\end_inset

 Zufallszahlen mit Normalverteilung mit dem Mittelwert 2 und der Streuung 0,1 erzeugen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

np.random.seed(0) 
\end_layout

\begin_layout Plain Layout

z = np.random.normal(2,
 0.1,
 7)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Mit 
\family typewriter
np.random.seed(0) 
\family default
wird der Zufallsgenerator auf den Startwert 0 gesetzt.
 Nachfolgende Aufrufe von 
\family typewriter
np.random
\family default
 erzeugen eine immer gleiche Abfolge von Zufallszahlen.
\end_layout

\begin_layout Subsubsection
lineare Differenzialgleichung n-ter Ordnung lösen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:dglloesen"

\end_inset

Eine lineare inhomogene DGL mit konstanten Koeffizienten kann in folgende explizite Form gebracht werden:
\begin_inset Formula 
\[
y^{\left(\!n\!\right)}\!\left(\!t\!\right)\!=\!\overrightarrow{a_{0}\,y\left(\!t\!\right)\!+\!a_{1}\,y^{\prime}\left(\!t\!\right)\!+\!\dots\!+\!a_{n-1}\,y^{\left(\!n\!-\!1\!\right)}\left(\!t\!\right)}^{\llap{\raisebox{5mm}{\text{steigende Ableitungen}\qquad\null}}}\!+\!g\left(t\!\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Darin ist 
\begin_inset Formula $y\left(t\right)$
\end_inset

 die gesuchte Funktion und 
\begin_inset Formula $g\left(t\right)$
\end_inset

 das Störglied.
\end_layout

\begin_layout Standard
Diese DGL wird zunächst in Systemdarstellung überführt:
\begin_inset Formula 
\[
\left(\!\!\!\begin{array}{c}
y^{\prime}\!\left(t\right)\\
y^{\prime\prime}\!\left(t\right)\\
y^{\prime\prime\prime}\!\left(t\right)\\
\vdots\\
y^{\left(n\right)}\!\left(t\right)
\end{array}\!\!\!\right)\!\!\!=\!\!\!\left(\!\!\!\begin{array}{ccccc}
{\color{blue}0\!} & {\color{green}\!1} & {\color{green}0} & {\color{green}\!\!\dots\!\!} & {\color{green}0}\\
{\color{blue}\vdots} & {\color{green}\!0} & {\color{green}1} & {\color{green}\!\!\ddots\!\!} & {\color{green}\vdots}\\
{\color{blue}\vdots} & {\color{green}\vdots} & {\color{green}\!\ddots\!} & {\color{green}\!\!\ddots\!\!} & {\color{green}0}\\
{\color{blue}0\!} & {\color{green}\!0} & {\color{green}\!\dots\!} & {\color{green}\!\!0\!\!} & {\color{green}1}\\
a_{0}\! & \!a_{1}\! & \!a_{2}\! & \!\!\dots\!\! & \!a_{n-1}
\end{array}\!\!\!\right)\!\!\cdot\!\!\left(\!\!\!\begin{array}{c}
y\left(t\right)\\
y^{\prime}\left(t\right)\\
y^{\prime\prime}\left(t\right)\\
\vdots\\
y^{\left(n-1\right)}
\end{array}\!\!\!\!\right)\!\!+\!\!\left(\!\!\begin{array}{c}
{\color{blue}0}\\
{\color{blue}\vdots}\\
{\color{blue}\vdots}\\
{\color{blue}0}\\
g\left(t\right)
\end{array}\!\!\!\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Darin ist der 
\color green
grün
\color inherit
 eingezeichnete Bereich eine Einheitsmatrix und die 
\color blue
blauen
\color inherit
 Bereiche sind mit Nullen gefüllt.
\end_layout

\begin_layout Standard
Die rechte Seite wird für die numerische Lösung als Funktion definiert.
 Dies wird Anhand des Beispiels
\begin_inset Formula 
\[
\underbrace{\left(\begin{array}{cc}
0 & 1\\
-3 & -4
\end{array}\right)}_{\boldsymbol{A}}\,\underbrace{\left(\begin{array}{c}
y\left(t\right)\\
y^{\prime}\left(t\right)
\end{array}\right)}_{\boldsymbol{y}}+\underbrace{\left(\begin{array}{c}
0\\
200\,\sin\left(6\,\pi\,t\right)
\end{array}\right)}_{\boldsymbol{b}}
\]

\end_inset

gezeigt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.integrate import solve_ivp
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def dydt(tp,yT):
\end_layout

\begin_layout Plain Layout

    A = np.array([[0,
 1],[-3,
 -4]]) 
\end_layout

\begin_layout Plain Layout

    b = np.array([[0],[200*np.sin(6*pi*tp)]]) 
\end_layout

\begin_layout Plain Layout

    retval = ((np.array([yT@(A.transpose())]).transpose())+b).transpose()[0]
\end_layout

\begin_layout Plain Layout

    return(retval)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die ungewöhnliche Darstellung mit den Transponierten wurde gewählt,
 weil die Zustandsvariablen 
\family typewriter
yT 
\family default
als Zeilenvektoren übergeben werden und in der mathematischen Systemdarstellung eigentlich Spaltenvektoren verwendet werden.
\end_layout

\begin_layout Standard
Es gilt 
\begin_inset Formula $\left(A\,y\right)^{\mathrm{T}}=y^{\mathrm{T}}\,A^{\mathrm{T}}\Rightarrow A\,y=\left(y^{\mathrm{T}}\,A^{\mathrm{T}}\right)^{\mathrm{T}}$
\end_inset

 .
 Darin ist 
\begin_inset Formula $y^{T}$
\end_inset

 der Zeilenvektor 
\family typewriter
yT
\family default
 in Python.
 Bei der Berechnung des Rückgabewertes 
\family typewriter
retval
\family default
 wird am Ende das erste Element aus einer Matrix mit 
\family typewriter
[0] 
\family default
extrahiert.
 Das ist notwendig,
 weil als Rückgabewert ein Zeilenvektor erwartet wird.
 Ohne die Extraktion wäre es eine Matrix mit einer Zeile und zwei Spalten.
\end_layout

\begin_layout Standard
Mit dem nachfolgenden Code wird das Anfangswertproblem (die DGL) mit den Anfangswerten 
\family typewriter
[3,
 0]
\family default
 gelöst.
 Dies steht für 
\begin_inset Formula $y\left(0\right)=3$
\end_inset

 und 
\begin_inset Formula $y^{\prime}\left(0\right)=0$
\end_inset

.
 In Matrizenschreibweise ist dies
\begin_inset Formula 
\[
\left(\begin{array}{c}
y\left(0\right)\\
y^{\prime}\left(0\right)
\end{array}\right)=\left(\begin{array}{c}
3\\
0
\end{array}\right)\,.
\]

\end_inset

Die numerischen und die analytischen Werte werden zu den Zeitpunkten ermittelt,
 die in 
\family typewriter
t
\family default
 angegeben sind.
 Ein graphischer Vergleich der analytischen und der numerischen Lösung wird als PDF-Grafik gespeichert.
 Ebenfalls wird die maximale Abweichung zwischen den ermittelten Funktionwerten ausgegeben.
 Der Parameter 
\family typewriter
rtol
\family default
 ist standardmäßig 
\family typewriter
1e-3
\family default
 und beschreibt die relative Genauigkeit des Lösers.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

tend=4
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,tend,175)
\end_layout

\begin_layout Plain Layout

s=solve_ivp(dydt,
 [0,
 tend],
 [3,
 0],
 t_eval=t,
 rtol=1e-9)
\end_layout

\begin_layout Plain Layout

yana = np.sin(6*pi*t) #ana.
 Lsng
\end_layout

\begin_layout Plain Layout

fig,
 ax = mpl.subplots()
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

g1,
 = ax.plot(t,
 yana,
 'g-',
 label='analytisch')
\end_layout

\begin_layout Plain Layout

g2,
 = ax.plot(t,
 s.y[0],
 'rx',
 label='numerisch')
\end_layout

\begin_layout Plain Layout

ax.legend(handles=[g1,g2])
\end_layout

\begin_layout Plain Layout

print("max.
 Diff.
 ana.-num.
 Lsng:
 {:f}".format(max(s.y[0]-yana)))
\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

mpl.savefig(os.path.basename(__file__).replace('.py','') + '_gen.pdf')
\end_layout

\begin_layout Plain Layout

# Mit Jupyter:
 mpl.savefig(os.path.basename(sys.argv[0]).replace('.py','') + '_gen.pdf')
\end_layout

\begin_layout Plain Layout

mpl.close("all")
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
nichtlineare Differenzialgleichung n-ter Ordnung
\end_layout

\begin_layout Standard
Gegeben sei die nichtlineare DGL 
\begin_inset Formula $y^{\prime\prime}\left(t\right)=-1/\left(t+y\left(t\right)^{2}\right)$
\end_inset

.
 Dies wird zunächst in eine vektorielle Schreibweise überführt:
\begin_inset Formula 
\[
\left(\begin{array}{cc}
y\left(t\right) & y^{\prime}\left(t\right)\end{array}\right)^{\prime}=\left(\begin{array}{cc}
y^{\prime}\left(t\right) & \frac{-1}{t+y\left(t\right)^{2}}\end{array}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
Die Lösung kann mit 
\family typewriter
solve_ivp
\family default
 berechnet werden.
 Die Funktion 
\family typewriter
nonlinearfunktion
\family default
 beschreibt die DGL in der vektoriellen Schreibweise.
 Der Funktionsverlauf wird an denjenigen Zeitpunkten ausgegeben,
 die mit 
\family typewriter
t_eval
\family default
 definiert sind.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from scipy.integrate import solve_ivp
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

def nonlinearfunktion(t,Yvec):return np.array([Yvec[1],
 -1/(t+Yvec[0]**2)])
\end_layout

\begin_layout Plain Layout

t0 = 0 # Startzeit
\end_layout

\begin_layout Plain Layout

tend = 20.5 # Endzeit
\end_layout

\begin_layout Plain Layout

Yvecnull = [3,
 0] # Anfangswerte [y(0),
 y'(0)]
\end_layout

\begin_layout Plain Layout

R =solve_ivp(nonlinearfunktion,[t0,
 tend],
 Yvecnull,
 t_eval=np.linspace(t0,tend,25))
\end_layout

\begin_layout Plain Layout

# Ergebnis plotten:
\end_layout

\begin_layout Plain Layout

fig,
 ax = mpl.subplots()
\end_layout

\begin_layout Plain Layout

ax.plot (R.t,
 R.y[0],
 'rx') 
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Werteliste nahe Null zu Null runden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:zunullrunden"

\end_inset

Werte in der Nähe zu Null zu Null runden
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

def tszero(v):
\end_layout

\begin_layout Plain Layout

  return(np.array([int(not(x)) for x in np.isclose(v,0.0*v)])*v)
\end_layout

\begin_layout Plain Layout

print(tszero(np.array([0.234]))) # [0.234]
\end_layout

\begin_layout Plain Layout

print(tszero(np.array([0.234e-14]))) # [0.]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Abschnittsweise definierte Funktionen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:abschnittsweisedefiniertefkt"

\end_inset

Abschnittsweise definierte Funktionen können mit if/then/else-Konstruktionen erzeugt werden oder mit np.piecewise.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

def fvonx(x):
\end_layout

\begin_layout Plain Layout

    fx = np.piecewise(x,
 [x<3,
           (3<=x) & (x<3.5),
   (3.5<=x) ],
 
\end_layout

\begin_layout Plain Layout

         [lambda x:
 0.0,
 lambda x:
 (x-3)**2,
 lambda x:
 -(x-4)**2+1/2])
\end_layout

\begin_layout Plain Layout

    return(fx)     
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

x = np.linspace(0,7,150)
\end_layout

\begin_layout Plain Layout

y = fvonx(x)
\end_layout

\begin_layout Plain Layout

ax.plot(x,y,'r-')
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Heaviside-Funktion (Sprungfunktion)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:heavisidesprungfunktion"

\end_inset

Die Heaviside- oder Sprungfunktion ist wie folgt defindiert:
\begin_inset Formula 
\[
f\left(t\right)=\begin{cases}
1 & 0<t\\
x & t=0\\
0 & t<0
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = 2
\end_layout

\begin_layout Plain Layout

t = 3.14
\end_layout

\begin_layout Plain Layout

print(np.heaviside(t,
 x)) # ergibt 1
\end_layout

\begin_layout Plain Layout

print(np.heaviside(0,
 x)) # ergibt 2
\end_layout

\begin_layout Plain Layout

print(np.heaviside(-10,
 x)) # ergibt 0
\end_layout

\end_inset


\end_layout

\begin_layout Section
Symbolische Mathematik
\end_layout

\begin_layout Subsection
Brüche
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:brueche"

\end_inset

Brüche mit sympy.
 Beispiel:
 
\begin_inset Formula $\frac{1}{3}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import Rational
\end_layout

\begin_layout Plain Layout

b = sympy.Rational(1,3)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Leider kann ein Rational-Ausdruck nicht als Argument an einen Rational-Ausdruck übergeben werden.
 Beispiel:
 
\begin_inset Formula $z=\frac{\sqrt{3}}{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Fehler:
\end_layout

\begin_layout Plain Layout

z = sympy.Rational(
\backslash

\end_layout

\begin_layout Plain Layout

  3**sympy.Rational(1,2),2)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abhilfe:
 
\begin_inset Formula $z=\frac{\sqrt{3}}{2}=\frac{\sqrt{3}}{\sqrt{2^{2}}}=\sqrt{\frac{3}{2^{2}}}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#funktionier:
\end_layout

\begin_layout Plain Layout

z = sympy.Rational(
\backslash

\end_layout

\begin_layout Plain Layout

  3,2**2)**sympy.Rational(1,2)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Terme rational machen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "rationaletermen"

\end_inset

Ausdrücke in einen einzelnen Bruch umformen
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import sympy
\end_layout

\begin_layout Plain Layout

x = sympy.symbols('x')
\end_layout

\begin_layout Plain Layout

f = (-2*x+3)/((x-1)**2+2**2)+(5)/(x-3)
\end_layout

\begin_layout Plain Layout

print(sympy.ratsimp(f))
\end_layout

\begin_layout Plain Layout

# ergibt:
\end_layout

\begin_layout Plain Layout

# (3*x**2-x+16)/(x**3-5*x**2+11*x-15)
\end_layout

\end_inset


\end_layout

\begin_layout Section
Komplexe Zahlen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:komplexezahlensympy"

\end_inset

Komplexe Zahlen können mit dem Basis-Python verwendet werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

z = 4 + 3j
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Leider wird bei der Multiplikation mit einer komplexen Zahl mit 
\family typewriter
j 
\family default
das Ergebnis in eine Float-Variable geändert.
 Beispiel:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import Rational
\end_layout

\begin_layout Plain Layout

print(4+Rational(1,3)*1j)
\end_layout

\begin_layout Plain Layout

# 4 + 0.333333333333333*I
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn exakte Zahlen,
 also Brüche,
 gefordert sind,
 kann dies mit der Bibliothek sympy berechnet werden.
 Dazu wird die komplexen Einheit 
\family typewriter
I
\family default
 aus der sympy-Bibliothek importiert und verwendet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import Rational I
\end_layout

\begin_layout Plain Layout

print(4+Rational(1,3)*I)
\end_layout

\begin_layout Plain Layout

# ergibt:
 4 + I/3
\end_layout

\begin_layout Plain Layout

print(4+Rational(1,3)*I**2)
\end_layout

\begin_layout Plain Layout

# ergibt:
 11/3
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ableitungen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ableitungen"

\end_inset

Ableitung von Funktionen berechnen
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

t = symbols('t')
\end_layout

\begin_layout Plain Layout

expr = Rational(1,2)*log((1+t)/(1-t))
\end_layout

\begin_layout Plain Layout

pprint(diff(expr,
 t,
 1))
\end_layout

\begin_layout Plain Layout

# sympy.sqrt() statt math.sqrt()
\end_layout

\begin_layout Plain Layout

pprint(diff(sqrt(2*t),
 t,
 1))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integrieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:symbolischintegrieren"

\end_inset

Symbolisch ein bestimmtens Integral bilden
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

init_printing(use_unicode=False,
 wrap_line=False)
\end_layout

\begin_layout Plain Layout

del t
\end_layout

\begin_layout Plain Layout

t = Symbol('t')
\end_layout

\begin_layout Plain Layout

ak = integrate(2*pi*t*k+4,(t,0,1))
\end_layout

\begin_layout Plain Layout

print(ak) # ergibt 4 + 15*pi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Symbolisch ein unbestimmtes Integral bilden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

init_printing(use_unicode=False,
 wrap_line=False)
\end_layout

\begin_layout Plain Layout

del t
\end_layout

\begin_layout Plain Layout

t = Symbol('t')
\end_layout

\begin_layout Plain Layout

ak = integrate(2*pi*t*k+4,t)
\end_layout

\begin_layout Plain Layout

print(ak)  # ergibt 15*pi*t**2 + 4*t
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sonderfälle und Fallunterscheidungen im Ergebnis unterdrücken,
 indem Konstanten als Positive relle Zahlen definiert werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

w,
 tau,
 t,
 tp = symbols('w tau t tp',
 positive=True,
 real = True)
\end_layout

\begin_layout Plain Layout

integrate(exp(-tau*tp)*cos(w*tp),(tp,0,t))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausmultiplizieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ausmultiplizieren"

\end_inset

Ausmultiplizieren (engl.
 expand) von Ausdrücken
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

f = ((x+2)*(x+2)*(x-2)*(x-3))
\end_layout

\begin_layout Plain Layout

pprint(expand(f))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ersetzungen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:termeersetzen"

\end_inset

Ersetzen von Teilausdrücken.
 In diesem Beispiel wird in 
\begin_inset Formula $-6\,x^{3}+16\,x^{2}-84\,x+64$
\end_inset

 der Ausdruck 
\begin_inset Formula $x^{2}$
\end_inset

 ersetzt durch 
\begin_inset Formula $-2\,x-17$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

g = -6*x**3 + 16*x**2 - 84*x+64
\end_layout

\begin_layout Plain Layout

print(g.subs(x**2,-2*x-17))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eine Schwierigkeit ist,
 in 
\begin_inset Formula $x^{3}$
\end_inset

 den Ausdruck 
\begin_inset Formula $x^{2}$
\end_inset

 durch beispielsweise 
\begin_inset Formula $w$
\end_inset

 zu ersetzen zu 
\begin_inset Formula $x^{2}\,w$
\end_inset

.
 Abhilfe:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

x = symbols('w')
\end_layout

\begin_layout Plain Layout

g = -6*x**3 + 16*x**2 - 84*x+64
\end_layout

\begin_layout Plain Layout

g = g.replace(x**3,UnevaluatedExpr(x**2)*x)
\end_layout

\begin_layout Plain Layout

print(r2.subs(x**2,w).doit())
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Numerische Auswertung
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:numerischeauswertung"

\end_inset

Ein symbolischer Ausdruck kann mit 
\family typewriter
evalf
\family default
 in einen Zahlenwert umgewandelt werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import sympy
\end_layout

\begin_layout Plain Layout

y = sympy.sqrt(2)
\end_layout

\begin_layout Plain Layout

print(y) # sqrt(2)
\end_layout

\begin_layout Plain Layout

print(y.evalf()) # 1.4142
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Evaluation verhindern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:evaluationverhindern"

\end_inset

Gelegentlich will man eine Auswertung eines Ausdrucks verhindern:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

print(x+x) # ergibt 2*x
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Abhilfe:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

print(UnevaluatedExpr(x)+x) # x+x
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Der Parameter 
\family typewriter
evaluate=False
\family default
 verhindert die Auswertung bis zum nächsten Aufruf
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

w = symbols('w')
\end_layout

\begin_layout Plain Layout

z = Add(w,w,w,
 evaluate=False)
\end_layout

\begin_layout Plain Layout

z = Add(z,w,
 evaluate = False)
\end_layout

\begin_layout Plain Layout

print(z) # w+w+w+w
\end_layout

\begin_layout Plain Layout

z = z
\end_layout

\begin_layout Plain Layout

print(z+1) # z wird evaluiert:
 4*w+1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Permanente Auswertung wird mit 
\family typewriter
UnevaluatedExpr()
\family default
 verhindert und mit 
\family typewriter
doit()
\family default

\begin_inset space \thinspace{}
\end_inset

aufgehoben:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

z = UnevaluatedExpr(w)+w
\end_layout

\begin_layout Plain Layout

print(z)
\end_layout

\begin_layout Plain Layout

print(z+1) # z wird nicht evaluiert
\end_layout

\begin_layout Plain Layout

print((z+1).doit()) # z wird evaluiert
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Vereinfachungen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vereinfachungen"

\end_inset

Vereinfachungen können mit simplify erfolgen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

print(simplify(x*(x**3*x**2)))
\end_layout

\begin_layout Plain Layout

# ergibt:
 x**6
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Automatische Vereinfachung
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:automatischevereinfachung"

\end_inset

Summen werden automatisch gebildet und Ausdrücke vereinfacht.
 In diesem Beispiel wird in 
\begin_inset Formula $4\,x+5\,x^{2}-2\,x^{2}+2\,x^{2}-4$
\end_inset

 alle gleiche Potenzen von 
\begin_inset Formula $x$
\end_inset

 summiert und ein Polynom gebildet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

x = symbols('x')
\end_layout

\begin_layout Plain Layout

g = 4*x+5*x**2-2*x**2+2*x**2-4
\end_layout

\begin_layout Plain Layout

print(g)
\end_layout

\begin_layout Plain Layout

#ergibt:
 5*x**2 + 4*x - 4
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausklammern
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ausklammern"

\end_inset

Ausdrücke können wie folgt ausgeklammert werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

t = symbols('t')
\end_layout

\begin_layout Plain Layout

expr = sin(t)*t+cos(t)*t+
\backslash

\end_layout

\begin_layout Plain Layout

  exp(2*t)*t**2+exp(3*t+5)*t**2
\end_layout

\begin_layout Plain Layout

pprint(collect(expr,
 [t,
 t**2]))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergibt:
 
\begin_inset Formula $t^{2}\,\left(\mathrm{e}^{2\,t}+\mathrm{e}^{3\,t+5}\right)+t\cdot\left(\sin\left(t\right)+\cos\left(t\right)\right)$
\end_inset


\end_layout

\begin_layout Subsection
Vereinfachung von Rationalen Funktionen (Polynombrüche)
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:vereinfachungpolynombrueche"

\end_inset

Rationale Funktionen sind Brüche mit Polynomen im Zähler und Polynomen im Nenner.
 Diese können mit ratsimp vereinfacht werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

t = symbols('t')
\end_layout

\begin_layout Plain Layout

#expr=Rational(1,2)*log((1+t)/(1-t))
\end_layout

\begin_layout Plain Layout

#pprint(diff(expr,
 t,
 1))
\end_layout

\begin_layout Plain Layout

expr = Poly(1,t)/Poly(1-t**2,t)
\end_layout

\begin_layout Plain Layout

pprint(ratsimp(diff(expr,
 t,
 7)))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Partialbruchzerlegung
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:partialbruchzerlegung"

\end_inset

Funktion zur Partialbruchzerlegung:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

s = symbols('s')
\end_layout

\begin_layout Plain Layout

f = s/((s**2+7**2)*
\backslash

\end_layout

\begin_layout Plain Layout

   ((s+4)**2+3**2)*(s+5))
\end_layout

\begin_layout Plain Layout

pprint(apart(f))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausmultiplizieren von Partialbrüchen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ausmultiplizierenvonpartialbruechen"

\end_inset

Ausmulitplizieren der linken Seite der folgenden Gleichung ergibt die rechte:
\begin_inset Formula 
\[
\frac{5}{3}\,\frac{1}{s+1}-\frac{2}{s+2}+\frac{1}{3}\,\frac{1}{s-2}=\frac{3\,s-2}{s^{3}+s^{2}-4\,s-4}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

s = symbols('s')
\end_layout

\begin_layout Plain Layout

expr = (Rational(5,3)*Poly(1,s)/Poly(s+1,s) 
\end_layout

\begin_layout Plain Layout

  -2*Poly(1,s)/Poly(s+2,s) 
\end_layout

\begin_layout Plain Layout

  + Rational(1,3)*Poly(1,s)/Poly(s-2,s))
\end_layout

\begin_layout Plain Layout

pprint(ratsimp(expr))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausgabe in Formel-Schreibweise
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ausgabeformelform"

\end_inset

Mit pprint (pretty-print) werden Formeln in Ascii–Art dargestellt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

t = symbols('t')
\end_layout

\begin_layout Plain Layout

expr = Poly(1,t)/Poly(1-t**2,t)
\end_layout

\begin_layout Plain Layout

pprint(ratsimp(diff(expr,
 t,
 1)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergibt:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

     2*t     
\end_layout

\begin_layout Plain Layout

-------------
\end_layout

\begin_layout Plain Layout

 4      2    
\end_layout

\begin_layout Plain Layout

t  - 2*t  + 1
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Exakte Lösungen linearer Gleichungssysteme
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:exaktelsngvonlgs"

\end_inset

Häufig sind lineare Gleichungssysteme gegeben,
 bei denen als Koeffizienten oder Konstantenvektor als Brüche angegeben sind.
 Beispiel:
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $\left(\begin{array}{ccc}
1/3 & -1/2 & -1/5\\
1/4 & -1 & -1/4\\
1/2 & -1/3 & -1/6
\end{array}\right)\,\left(\begin{array}{c}
A\\
B\\
C
\end{array}\right)=\left(\begin{array}{c}
5/30\\
1/16\\
9/36
\end{array}\right)$
\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die exakte Lösung für die Unbekannten sind i.d.R.
 Brüche und kann mit der Bibliothek sympy und fractions berechnet werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

from fractions import Fraction
\end_layout

\begin_layout Plain Layout

def F(a,b):
\end_layout

\begin_layout Plain Layout

    return(Fraction(a,b))
\end_layout

\begin_layout Plain Layout

A,
 B,
 C = symbols('A B C')
\end_layout

\begin_layout Plain Layout

system = Matrix(
\backslash

\end_layout

\begin_layout Plain Layout

 ((F(1,3),F(-1,2),F(-1,5),F(5,30)),
\backslash

\end_layout

\begin_layout Plain Layout

 (F(1,4),F(-1,1),F(-1,4),F(1,16)),
\backslash

\end_layout

\begin_layout Plain Layout

 (F(1,2),F(-1,3),F(-1,6),F(9,36))))
\end_layout

\begin_layout Plain Layout

erg=solve_linear_system(system,A,B,C)
\end_layout

\begin_layout Plain Layout

print(erg)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergibt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{A:
 17/40,
 B:
 1/5,
 C:
 -5/8}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Matrix symbolisch invertieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:symbolischinvertieren"

\end_inset

Eine Matrix soll invertiert werden.
 Beispiel:
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Formula $M=\left(\begin{array}{ccc}
L_{1} & 0 & L_{3}\\
L_{1} & L_{2} & 0\\
0 & -L_{2} & 0
\end{array}\right)$
\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from math import pi
\end_layout

\begin_layout Plain Layout

from sympy import *
\end_layout

\begin_layout Plain Layout

L1,
 L2,
 L3 = symbols('L1,
 L2,
 L3')
\end_layout

\begin_layout Plain Layout

Mat = Matrix([[L1,
 0,
  L3],
\end_layout

\begin_layout Plain Layout

             [L1,
 L2,
 0],
\end_layout

\begin_layout Plain Layout

             [0,
 -L2,
 0]
\end_layout

\begin_layout Plain Layout

             ])
\end_layout

\begin_layout Plain Layout

Mat.inv()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergibt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Matrix([
\end_layout

\begin_layout Plain Layout

[   0,
  1/L1,
  1/L1],
\end_layout

\begin_layout Plain Layout

[   0,
     0,
 -1/L2],
\end_layout

\begin_layout Plain Layout

[1/L3,
 -1/L3,
 -1/L3]])
\end_layout

\end_inset


\end_layout

\begin_layout Section
Anaconda-Spezialitäten
\end_layout

\begin_layout Subsection
graphviz
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:graphtoolinstallieren"

\end_inset


\end_layout

\begin_layout Standard
Hinzufügen und die Pakete
\end_layout

\begin_layout Itemize
graphviz
\end_layout

\begin_layout Itemize
python-graphviz
\end_layout

\begin_layout Itemize
pydot
\end_layout

\begin_layout Standard
installieren.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/33433274/anaconda-graphviz-cant-import-after-installation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://graphviz.readthedocs.io/en/stable/manual.html
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# Quelle:
 https://graphviz.readthedocs.io/en/stable/manual.html
\end_layout

\begin_layout Plain Layout

from graphviz import Digraph
\end_layout

\begin_layout Plain Layout

dot = Digraph(comment='The Round Table')
\end_layout

\begin_layout Plain Layout

dot.node('A',
 'King Arthur')
\end_layout

\begin_layout Plain Layout

dot.node('B',
 'Sir Bedevere the Wise')
\end_layout

\begin_layout Plain Layout

dot.node('C',
 'Sir lanCelot the Brave')
\end_layout

\begin_layout Plain Layout

#dot.edges(['AB',
 'AL'])
\end_layout

\begin_layout Plain Layout

dot.edge('A',
 'B',
 constraint='true')
\end_layout

\begin_layout Plain Layout

dot.edge('B',
 'C',
 constraint='true')
\end_layout

\begin_layout Plain Layout

dot.edge('A',
 'C',
 constraint='true')
\end_layout

\begin_layout Plain Layout

dot.render('c:/temp/round-table.gv',
 view=True)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Anaconda aufräumen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:anacondaupdates-1"

\end_inset


\end_layout

\begin_layout Standard
In Anaconda 
\begin_inset Formula $\rightarrow$
\end_inset

 Home 
\begin_inset Formula $\rightarrow$
\end_inset

 cmd.exe Prompt 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes pld
\end_inset

conda clean 
\begin_inset ERT
status open

\begin_layout Plain Layout

{-}a
\end_layout

\end_inset


\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Subsection
Anaconda Updates installieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:anacondaupdates"

\end_inset


\end_layout

\begin_layout Standard
In Anaconda 
\begin_inset Formula $\rightarrow$
\end_inset

 Home 
\begin_inset Formula $\rightarrow$
\end_inset

 cmd.exe Prompt 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes pld
\end_inset

conda update 
\begin_inset ERT
status open

\begin_layout Plain Layout

{-}{-}all
\end_layout

\end_inset


\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Standard
oder
\end_layout

\begin_layout Standard
In Anaconda 
\begin_inset Formula $\rightarrow$
\end_inset

 Home 
\begin_inset Formula $\rightarrow$
\end_inset

 cmd.exe Prompt 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Quotes pld
\end_inset

conda update jupyterlab
\begin_inset Quotes prd
\end_inset


\end_layout

\begin_layout Section
Regular Expressions
\end_layout

\begin_layout Subsection
Extrakte
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:extrakte"

\end_inset

Wenn aus dem String 
\family typewriter

\begin_inset Quotes pld
\end_inset

magicwoche 12
\begin_inset Quotes prd
\end_inset


\family default
 die Zahl 12 extrahiert werden soll,
 dann kann das mit folgendem Befehl erfolgen
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import re #regular expressions
\end_layout

\begin_layout Plain Layout

s1 = "magicwoche 12" 
\end_layout

\begin_layout Plain Layout

p = re.compile('magicwoche ([0-9]+)')
\end_layout

\begin_layout Plain Layout

print(p.match(s1).group(1))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Die runden Klammern um 
\family typewriter
[0-9]+
\family default
 bilden eine Gruppe.
 Diese Gruppe wird mit 
\family typewriter
.match(s).group(1)
\family default
 angesprochen.
 Mit Match werden nur Treffer zu Beginn eines Strings gefunden.
 Für eine Volltextsuche sollte man 
\family typewriter
search
\family default
 verwenden.
\end_layout

\begin_layout Subsection
Muster
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:muster"

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Muster
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wirkung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
s
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Whitespace
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter

\backslash
S
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
alles außer Whitespace
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[(]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eine geöffnete runde Klammer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[a-z]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ein kleiner Buchstabe
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eine Ziffer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Muster
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wirkung
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]{4}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vier Ziffern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]{4,}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vier oder mehr Ziffern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]{2,5}
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
zwischen 2 und 5 Ziffern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Keine oder eine Ziffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
keine,
 eine oder mehrere Ziffer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
[0-9]+
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
eine oder mehrere Ziffern
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Substrings ersetzen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:regexsubstringsersetzen"

\end_inset

Mit regular expressions können substrings gefunden werden,
 die dann durch andere Strings ersetzt werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import re
\end_layout

\begin_layout Plain Layout

erg = re.sub('y($|[^
\backslash
^])',
 # Muster
\end_layout

\begin_layout Plain Layout

'y(t)',
 # Ersatzstring
\end_layout

\begin_layout Plain Layout

r'9*y^{
\backslash
prime}(t) + 20*y') # Suchtext
\end_layout

\begin_layout Plain Layout

print(erg) #ergibt 9*y^{
\backslash
prime}(t) + 20*y(t)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In diesem Besipiel bedeutet 
\family typewriter
($|[^
\backslash
^])
\family default
,
 dass 
\family typewriter
y
\family default
 am Ende stehen muss ($) oder nicht von einem ^ gefolgt wird.
 Was in runden Klammern steht ist eine Gruppe.
\end_layout

\begin_layout Subsection
Test auf Funde
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:testauffunde"

\end_inset

Mit dem folgenden Code wird überprüft,
 ob ein String zu einer regular expression passt.
 
\family typewriter
match 
\family default
gibt None zurück,
 wenn nichts gefunden wurde.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import re
\end_layout

\begin_layout Plain Layout

p = re.compile('hal')
\end_layout

\begin_layout Plain Layout

if p.match(
\begin_inset Quotes pld
\end_inset

hallo
\begin_inset Quotes prd
\end_inset

)!=None:
\end_layout

\begin_layout Plain Layout

    print(p.match(
\begin_inset Quotes pld
\end_inset

hallo
\begin_inset Quotes prd
\end_inset

).group(1))
\end_layout

\end_inset


\end_layout

\begin_layout Section
Matplotlib
\end_layout

\begin_layout Subsection
Einfachster Plot
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:einfachsterplot"

\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

t=[k for k in range(0,round(70/0.2))]
\end_layout

\begin_layout Plain Layout

tbl=[1/(1+k*0.2) for k in t]
\end_layout

\begin_layout Plain Layout

import matplotlib
\end_layout

\begin_layout Plain Layout

matplotlib.pyplot.plot(t,tbl)
\end_layout

\begin_layout Plain Layout

matplotlib.pyplot.grid()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Schriftart Stix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:schriftartstrix"

\end_inset

In dem folgenden Code-Beispiel ist erklärt,
 wie in einer Matplotlib-Grafik die Schrifart Stix (https://www.stixfonts.org/) aktiviert ist.
 In der Windows-Zeichentabelle muss dazu die Schrifart 
\begin_inset Quotes pld
\end_inset

STIX Two Text
\begin_inset Quotes prd
\end_inset

 erscheinen.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://fkaule.github.io/Python_for_Engineers/Datenvisualisierung/Matplotlib/scientific_plots.html
\end_layout

\end_inset

 ,
 
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/stipub/stixfonts"
target "https://github.com/stipub/stixfonts"
literal "false"

\end_inset

.
 Dort für Windows die ttf-Fonts intstallieren (regular,
 italic,
 bold,
 sans)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

plt.rcParams['font.family']=
\backslash

\end_layout

\begin_layout Plain Layout

   'STIXGeneral'
\end_layout

\begin_layout Plain Layout

plt.rcParams['mathtext.fontset']=
\backslash

\end_layout

\begin_layout Plain Layout

   'stix'
\end_layout

\begin_layout Plain Layout

x = np.linspace(0,
 12,
 150)
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(80/25.4,50/25.4)
\end_layout

\begin_layout Plain Layout

g1,
 = ax.plot(x,
 np.sin(x))
\end_layout

\begin_layout Plain Layout

plt.grid()
\end_layout

\begin_layout Plain Layout

plt.xlabel('$x$')
\end_layout

\begin_layout Plain Layout

plt.ylabel('$y$')
\end_layout

\begin_layout Plain Layout

plt.subplots_adjust(left=0.22,
\backslash

\end_layout

\begin_layout Plain Layout

right=0.97,
 top=0.97,
 bottom=0.22)
\end_layout

\begin_layout Plain Layout

plt.savefig('bilddatei.pdf')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ausgabe verfügbarer Schriftarten
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:ausgabeverfuegbarerschriftarten"

\end_inset

In dem folgenden Code-Beispiel werden die installieren Schriftarten angezeigt:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.font_manager
\end_layout

\begin_layout Plain Layout

fpaths = matplotlib.font_manager.findSystemFonts()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in fpaths:
\end_layout

\begin_layout Plain Layout

    f = matplotlib.font_manager.get_font(i)
\end_layout

\begin_layout Plain Layout

    print(f.family_name)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Auflösung von Rastergrafiken
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:aufloesungdpi"

\end_inset

Rastergrafiken können mit einer explizit angegebenen Anzahl pro Bildpunkten pro Zoll (dpi = dots per inch) exportiert werden.
 Beispiel für 300 Bildpunkte pro Zoll (Standard sind 100 dpi):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

x = np.linspace(-15,
 15,
 150)
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(120/25.4,80/25.4)
\end_layout

\begin_layout Plain Layout

g1,
 = ax.plot(x,np.sin(x))
\end_layout

\begin_layout Plain Layout

plt.savefig('bilddatei.png',
 dpi=300)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Universal-Plot
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:universalplot"

\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

a = 0.3
\end_layout

\begin_layout Plain Layout

wc = 5
\end_layout

\begin_layout Plain Layout

wk = np.linspace(-15,
 15,
 500)
\end_layout

\begin_layout Plain Layout

A,
 B,
 C,
 D = -1/2,
 wc/2,
 -1/2,
 -wc/2 
\end_layout

\begin_layout Plain Layout

impt3 = (A*wk+B)/((wk-wc)**2 + a**2)
\end_layout

\begin_layout Plain Layout

impt4 = (C*wk+D)/((wk+wc)**2 + a**2)
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(120/25.4,80/25.4)
\end_layout

\begin_layout Plain Layout

g1,
 = ax.plot(wk,impt3,
 'g-',
\backslash

\end_layout

\begin_layout Plain Layout

  lw=5 ,
 label=r'$
\backslash
frac{1}{2}$')
\end_layout

\begin_layout Plain Layout

g2,
 = ax.plot(wk,impt4,
 'r-',
\backslash

\end_layout

\begin_layout Plain Layout

  label=r'$
\backslash
omega_{
\backslash
mathrm{k}}$')
\end_layout

\begin_layout Plain Layout

# fuer Legende:
 Komma nach g1 und g2
\end_layout

\begin_layout Plain Layout

# nicht vergessen beim Plot-Befehl!
\end_layout

\begin_layout Plain Layout

plt.legend(handles=[g1,
 g2])
\end_layout

\begin_layout Plain Layout

plt.xticks(np.arange(-2,13,step=1))
\end_layout

\begin_layout Plain Layout

plt.yticks(np.arange(0,6,step=1))
\end_layout

\begin_layout Plain Layout

ax.set_xlim([-15,15])
\end_layout

\begin_layout Plain Layout

ax.set_ylim([-1,1])
\end_layout

\begin_layout Plain Layout

plt.grid()
\end_layout

\begin_layout Plain Layout

plt.xlabel('$
\backslash
omega$')
\end_layout

\begin_layout Plain Layout

plt.ylabel('Imaginaerteil')
\end_layout

\begin_layout Plain Layout

plt.subplots_adjust(left=0.17,
\backslash

\end_layout

\begin_layout Plain Layout

  right=0.97,
 top=0.97,
 bottom=0.15)
\end_layout

\begin_layout Plain Layout

plt.savefig('bilddatei.pdf')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Kommas statt Punkte
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:kommasstattpunkte"

\end_inset

In diesem Minimalbeispiel wird gezeigt,
 wie als Dezimaltrennzeichen das Komma verwendet werden kann
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import matplotlib.ticker as tkr 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def func(x,
 pos):
 # formatter
\end_layout

\begin_layout Plain Layout

  s1 = '{:1.1f}'.format(x)
\end_layout

\begin_layout Plain Layout

  s2 = s1.replace('.',',')
\end_layout

\begin_layout Plain Layout

  return s2
\end_layout

\begin_layout Plain Layout

y_frmt = tkr.FuncFormatter(func)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

t = [k for k in range(10)]
\end_layout

\begin_layout Plain Layout

y = [1/(k+1) for k in t]
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p1 = ax.plot(t,
 y)
\end_layout

\begin_layout Plain Layout

ax.yaxis.set_major_formatter(y_frmt)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Achsenzahlen verschieben
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:kommasstattpunkte-1"

\end_inset

Die Achsenzahlen ('ticks') können von der Achse weg oder zur Achse und darüber hinaus verschoben werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

t = [k for k in range(10)]
\end_layout

\begin_layout Plain Layout

y = [1/(k+1) for k in t]
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p1 = ax.plot(t,
 y)
\end_layout

\begin_layout Plain Layout

ax.xaxis.set_tick_params(pad=-15)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ergibt:
 
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/034_ticksverschoben/ticksverschoben.png
	width 3cm

\end_inset

 statt:
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/034_ticksverschoben/ticksnichtverschoben.png
	width 3cm

\end_inset


\end_layout

\begin_layout Subsection
Positionen Hilfsgitterlinien
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:hilfsgitterabstand"

\end_inset

In diesem Minimalbeispiel wird gezeigt,
 wie die Positionen der Hilfsgitterlinien eingestellt werden können
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,12,100)
\end_layout

\begin_layout Plain Layout

y = 4*t**2-3*t+3
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p1 = ax.plot(t,
 y)
\end_layout

\begin_layout Plain Layout

plt.xticks(np.arange(0,12+1,step=1))
\end_layout

\begin_layout Plain Layout

plt.yticks(np.arange(0,601,step=50))
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Beschriftungspfeile
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:beschrifungspfeile"

\end_inset

In der Grafik kann über verschiedene Wege eine Pfeil eingefügt werden.
 Eine gute Lösung ist:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plt.annotate("",
 xy=(-1,2.3),
 
\end_layout

\begin_layout Plain Layout

 xytext=(0,2.3),
\backslash

\end_layout

\begin_layout Plain Layout

 arrowprops=dict(arrowstyle="|-|",
\backslash

\end_layout

\begin_layout Plain Layout

 linewidth=1.3,
 color='k',shrinkA=0,
\backslash

\end_layout

\begin_layout Plain Layout

shrinkB=0,
 capstyle='round'))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Darin sind die ersten Koordinaten -1;2,3 und die zweiten Koordinaten 0;2.3.
 Für die Pfeilart gibt es,
 unter anderen,
 die Möglichkeiten 
\begin_inset Quotes pld
\end_inset

|-|
\begin_inset Quotes prd
\end_inset

,
 
\begin_inset Quotes pld
\end_inset

-|>
\begin_inset Quotes prd
\end_inset

 und 
\begin_inset Quotes pld
\end_inset

<|-
\begin_inset Quotes prd
\end_inset

.
 Die Koordinaten werden in Daten-Koordinaten angegeben.
\end_layout

\begin_layout Subsection
Beschriftungstext
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:beschrifungstext"

\end_inset

In der Grafik kann Text als Beschriftung eingefügt werden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plt.text(0.5,2.4,"$T_0$",
 ha='center')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Darin ist 0,5 die x-Koordinate,
 2,4 die y-Koordinate.
 Der Text ist als Latex-Formel gesetzt.
 Die horizontale Ausrichtung ist zentriert.
\end_layout

\begin_layout Subsection
Größe der Abbildung
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:groessederabbildung"

\end_inset

Die Anzeigegröße von matplotlib-plots in Rastergrafiken kann wie folgt vergrößert werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

fig.set_dpi(150)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
je größer die dpi-zahl ist,
 desto größer wird die Abbildung angezeigt.
\end_layout

\begin_layout Subsection
Grenzen der Achsen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:grenzenderachsen"

\end_inset

Die angezeigten Zahlenwerte der Achsen können folgendermaßen geändert werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ax.set_xlim([xmin,
 xmax])
\end_layout

\begin_layout Plain Layout

ax.set_ylim([ymin,
 ymax])
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plotstile
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:plotstile"

\end_inset

Linien können unterschiedlich gestaltet sein:
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.plot.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

x = np.linspace(0,10,100)
\end_layout

\begin_layout Plain Layout

ax.plot(x,np.sin(x),'g-')
\end_layout

\begin_layout Plain Layout

# 'g-' ist die Linien-Stildefinitino
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bei den Farben gibt es :
 
\family typewriter
'b'
\family default
=blau,
 
\family typewriter
'g'
\family default
=grün,
 
\family typewriter
'r'
\family default
=rot,
 
\family typewriter
'c'
\family default
=cyan,
 
\family typewriter
'm'
\family default
=magenta,
 
\family typewriter
'y'
\family default
=gelb,
 
\family typewriter
'k'
\family default
=schwarz,
 
\family typewriter
'w'
\family default
=weiß,
 
\family typewriter
'tab:orange'
\family default
,
 
\family typewriter
'tab:purple'
\family default
,
 
\family typewriter
'tab:brown'
\family default
,
 
\family typewriter
'tab:gray'
\family default
,
 
\family typewriter
'tab:pink'
\family default
,
\end_layout

\begin_layout Standard
Bei den Linienarten gibt es:
 
\family typewriter
'-'
\family default
=durchgängige Linie,
 
\family typewriter
'--'
\family default
=Gestrichelte Linie,
 
\family typewriter
'-.'
\family default
=Punkt-Strich-Linie,
 
\family typewriter
':'
\family default
=Gepunktete Linie
\end_layout

\begin_layout Standard
Weitere Farben:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://matplotlib.org/3.1.1/gallery/color/named_colors.html#sphx-glr-gallery-color-named-colors-py
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Höhen-Breitenverhältnis
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:aspectratio"

\end_inset

Gelegentlich müssen Achsen gleichskaliert sein.
 Eine Einheit in der horizontalen Richtung muss einer Einheit in vertikaler Richtung entsprechen.
 Eine Gerade mit der Steigung 1 wird dann einen Winkel von 45 Grad zur horizontalen Achse einnehmen.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.set_aspect.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

x = np.linspace(0,10,100)
\end_layout

\begin_layout Plain Layout

ax.plot(x,np.sin(x),'g-')
\end_layout

\begin_layout Plain Layout

ax.set_aspect('equal')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Höhen-Breitenverhältnis
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:aspectratio-1"

\end_inset

Gelegentlich müssen Achsen gleichskaliert sein.
 Eine Einheit in der horizontalen Richtung muss einer Einheit in vertikaler Richtung entsprechen.
 Eine Gerade mit der Steigung 1 wird dann einen Winkel von 45 Grad zur horizontalen Achse einnehmen.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.axes.Axes.set_aspect.html
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

x = np.linspace(0,10,100)
\end_layout

\begin_layout Plain Layout

ax.plot(x,np.sin(x),'g-')
\end_layout

\begin_layout Plain Layout

ax.set_aspect('equal')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Statistik
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:statistik"

\end_inset

Einfaches Statistik-Beispiel:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import random
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

Nx = 30000000;
\end_layout

\begin_layout Plain Layout

x = np.random.randn(Nx)
\end_layout

\begin_layout Plain Layout

hist,
 bin_edges = np.histogram(x)
\end_layout

\begin_layout Plain Layout

n,
 bins,
 patches = plt.hist(x=x,
\backslash

\end_layout

\begin_layout Plain Layout

 bins=np.arange(-2.5,2.75,0.25),
\backslash

\end_layout

\begin_layout Plain Layout

 color='#0504aa',
  alpha=0.7,
 rwidth=0.85)
\end_layout

\begin_layout Plain Layout

plt.grid(axis='y',
 alpha=0.75)
\end_layout

\begin_layout Plain Layout

plt.xlabel('Value')
\end_layout

\begin_layout Plain Layout

plt.ylabel('Frequency')
\end_layout

\begin_layout Plain Layout

plt.title('My Very Own Histogram')
\end_layout

\begin_layout Plain Layout

maxfreq = n.max()
\end_layout

\begin_layout Plain Layout

# Set a clean upper y-axis limit.
\end_layout

\begin_layout Plain Layout

plt.ylim(ymax=np.ceil(maxfreq / 10)
\backslash

\end_layout

\begin_layout Plain Layout

* 10 if maxfreq % 10 
\backslash

\end_layout

\begin_layout Plain Layout

 else maxfreq + 10)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/011_statistik/statistik.png
	width 6cm

\end_inset


\end_layout

\begin_layout Subsection
Statistik 2
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:statistik2"

\end_inset

Beispiel zum Thema Statistik.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

grsse = 3
\end_layout

\begin_layout Plain Layout

chiv = np.ones(Nx//grsse)
\end_layout

\begin_layout Plain Layout

for k in range(Nx//grsse):
\end_layout

\begin_layout Plain Layout

  for m in range(grsse):
\end_layout

\begin_layout Plain Layout

    chiv[k] = chiv[k]+
\backslash

\end_layout

\begin_layout Plain Layout

    x[k*grsse+m]**2
\end_layout

\begin_layout Plain Layout

hist,
 bin_edges = np.histogram(chiv)
\end_layout

\begin_layout Plain Layout

n,
 bins,
 patches = plt.hist(x=chiv,
\backslash

\end_layout

\begin_layout Plain Layout

 bins=np.arange(0,15,0.1),
\backslash

\end_layout

\begin_layout Plain Layout

 color='#0504aa',
  alpha=0.7,
 rwidth=1.0)
\end_layout

\begin_layout Plain Layout

plt.grid(axis='y',
 alpha=0.75)
\end_layout

\begin_layout Plain Layout

plt.xlabel('Value')
\end_layout

\begin_layout Plain Layout

plt.ylabel('Frequency')
\end_layout

\begin_layout Plain Layout

plt.title('My Very Own Histogram')
\end_layout

\begin_layout Plain Layout

maxf = n.max()
\end_layout

\begin_layout Plain Layout

# Set a clean upper y-axis limit.
\end_layout

\begin_layout Plain Layout

plt.ylim(ymax=np.ceil(maxf / 10)
\backslash

\end_layout

\begin_layout Plain Layout

* 10 if maxf % 10 else maxf + 10)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/012_statistik2/statistik2.png
	width 90mm

\end_inset


\end_layout

\begin_layout Subsection
Verschiebung der Achsenbeschriftungen A
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:verschiebungachsenbeschriftungena"

\end_inset

Die Achsenbeschriftungen können mit dem Parameter labelpad von den Achsen weg verschoben werden.
 Negative Werte für labelpad führen zu einer Verschiebung zu den Achsen hin.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

t = [k for k in range(10)]
\end_layout

\begin_layout Plain Layout

y = [1/(k+1) for k in t]
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p1 = ax.plot(t,
 y)
\end_layout

\begin_layout Plain Layout

plt.xlabel('xlbl',
 labelpad=0)
\end_layout

\begin_layout Plain Layout

plt.ylabel('ylbl',
 labelpad=0)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Verschiebung der Achsenbeschriftungen B
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:verschiebungachsenbeschriftungenb"

\end_inset

Die Achsenbeschriftungen können auf bestimmte Positionen verschoben werden.
 Die Koordinatenangaben erfolgen in relativen Koordinaten zur Zechenfläche (rechts = 1,0,
 links = 0,
 unten = 0,
 oben = 1,0).
 Weiterhin kann die Drehung und Ausrichtung eingestellt werden
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

t = [k for k in range(10)]
\end_layout

\begin_layout Plain Layout

y = [1/(k+1) for k in t]
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p1 = ax.plot(t,
 y)
\end_layout

\begin_layout Plain Layout

ax.set_xlabel('xlbl')
\end_layout

\begin_layout Plain Layout

ax.xaxis.set_label_coords(0.95,
 0.45)
\end_layout

\begin_layout Plain Layout

ax.set_ylabel('ylbl',
 rotation=0,
 ha='left')
\end_layout

\begin_layout Plain Layout

# Rotation = drehung in Grad
\end_layout

\begin_layout Plain Layout

# ha = horizontal alignment (Ausrichtung)
\end_layout

\begin_layout Plain Layout

ax.yaxis.set_label_coords(0.28,
 0.95)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Achsen teilweise oder vollständig ausblenden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:achsenausblenden"

\end_inset

Die Anzeige der Achsen kann teilweise oder vollständig ausgeschaltet werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

ax1.spines['top'].set_color('none')
\end_layout

\begin_layout Plain Layout

ax1.spines['right'].set_color('none')
\end_layout

\begin_layout Plain Layout

ax1.spines['bottom'].set_color('none')
\end_layout

\begin_layout Plain Layout

ax1.spines['left'].set_color('none')
\end_layout

\begin_layout Plain Layout

#Alle Achsenteile ausblenden:
\end_layout

\begin_layout Plain Layout

mpl.axis('off')
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Schraffierte Flächen
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:schraffierteflaechen"

\end_inset

Flächen können Schraffiert dargestellt werden.
 Als Optionen für hatch gibt es:
 
\backslash

\backslash
,
 
\backslash
,
 /,
 |,
 -,
 +,
 x,
 o,
 O,
 .,
 *.
 Die Schraffurfläche kann mit mehrfachen 
\begin_inset Quotes pld
\end_inset


\backslash

\backslash

\begin_inset Quotes prd
\end_inset

 verdichtet werden.
 Beispiel:
\family typewriter
hatch='
\backslash

\backslash

\backslash

\backslash

\backslash

\backslash
'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

fig,
 ax= plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(50/25.4,
 50/25.4)
\end_layout

\begin_layout Plain Layout

xo=np.linspace(0,
 0.999,
 50)
\end_layout

\begin_layout Plain Layout

x=np.append([1,0],xo)
\end_layout

\begin_layout Plain Layout

y=np.append([0,0],np.sqrt(1-xo**2))
\end_layout

\begin_layout Plain Layout

ax.fill(x,y,
 fill=False,
 hatch='
\backslash

\backslash
')
\end_layout

\begin_layout Plain Layout

plt.subplots_adjust(left=0.22,
\backslash

\end_layout

\begin_layout Plain Layout

  right=0.97,top=0.97,
 bottom=0.22)
\end_layout

\begin_layout Plain Layout

ax.set_aspect('equal')
\end_layout

\begin_layout Plain Layout

fig.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/015_schraffur/viertelkreis.png
	width 5cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Gefüllte Plots
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:gefuellteplots"

\end_inset

Mit dem Befehl fill statt plot können Flächen unter Kurven ausgefüllt werden:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

fig,
 ax= plt.subplots()
\end_layout

\begin_layout Plain Layout

xorig=np.linspace(0,1,30)
\end_layout

\begin_layout Plain Layout

x=np.append([0],
 xorig)
\end_layout

\begin_layout Plain Layout

y=np.append([0],
 np.sqrt(1-xorig**2))
\end_layout

\begin_layout Plain Layout

ax.fill(x,y)
\end_layout

\begin_layout Plain Layout

ax.plot(x,y,'k-')
\end_layout

\begin_layout Plain Layout

fig.show()
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pixelanzeige einer Matrix
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pixelanzeigematrix"

\end_inset

Werte einer Matrix können als gerasterte Fläche dargestellt werden.
 Die Angabe 
\family typewriter
extent=[xmin,
 xmax,
 ymin,
 ymax]
\family default
 gibt die Koordinatengrenzen der gerasterten Fläche an.
 Der Wert der einzelenen Matrixelemente wird in eine Farbe umgerechnet.
 Die Umrechnungsformel wird mit dem Parameter 
\family typewriter
cmap
\family default
 angegeben.
 Einige mögliche sind:
 
\family typewriter
'jet',
 'gist_earth'
\family default
 oder 
\family typewriter
'gnuplot'
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

#linspace in y Richtung abfallend
\end_layout

\begin_layout Plain Layout

xv=np.linspace(-2,2,10)
\end_layout

\begin_layout Plain Layout

yv=np.linspace(4,1,5)
\end_layout

\begin_layout Plain Layout

Mx,
 My = np.meshgrid(xv,
 yv)
\end_layout

\begin_layout Plain Layout

Mz = np.sqrt(Mx**2+My**2)
\end_layout

\begin_layout Plain Layout

fig,
 ax= plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(50/25.4,
 50/25.4)
\end_layout

\begin_layout Plain Layout

ax.imshow(Mz,
 extent=[-5,
 2,
 -3,
 4],
\backslash

\end_layout

\begin_layout Plain Layout

  aspect='auto',
 cmap='jet',
\backslash

\end_layout

\begin_layout Plain Layout

  interpolation = 'none')
\end_layout

\begin_layout Plain Layout

ax.grid(lw=1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/017_bilderanzeige/imshow.pdf
	width 5cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
2D-Flächenplot
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:2dflaechenplot"

\end_inset

2D-Werte über eine Fläche Plotten,
 wobei den Koordinaten Funktionswerte zugeordnet werden und diese Funktionswerte in eine Farbe übersetzt wird.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

phi00 = 1
\end_layout

\begin_layout Plain Layout

phi01 = 2
\end_layout

\begin_layout Plain Layout

phi10 = 3
\end_layout

\begin_layout Plain Layout

phi11 = 7
\end_layout

\begin_layout Plain Layout

x0 = 1
\end_layout

\begin_layout Plain Layout

x1 = 5
\end_layout

\begin_layout Plain Layout

y0 = 1
\end_layout

\begin_layout Plain Layout

y1 = 5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def phixy(xp,
 yp):
\end_layout

\begin_layout Plain Layout

    retval = 1/((y1-y0)*(x1-x0)) * (((x1-xp)*phi00 + (xp-x0)*phi10) 
\end_layout

\begin_layout Plain Layout

    * (y1-yp) + ((x1-xp)*phi01 + (xp-x0)*phi11) * (yp-y0))
\end_layout

\begin_layout Plain Layout

    return(retval)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

from matplotlib import cm
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

xv=np.linspace(x0,x1,15)
\end_layout

\begin_layout Plain Layout

yv=np.linspace(y0,y1,15)
\end_layout

\begin_layout Plain Layout

Mx,My=np.meshgrid(xv,yv)
\end_layout

\begin_layout Plain Layout

phi = phixy(Mx,My)
\end_layout

\begin_layout Plain Layout

plt,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

surf = ax.contourf(Mx,
 My,
 phi,
 100,
 cmap=cm.jet)
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/025_2dplot/heatmap.png
	width 5cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plot nach DIN
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:plotnachdin"

\end_inset

 Das nachfolgende Programm erzeugt einen Funktionsplot nach DIN-Norm:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import math
\end_layout

\begin_layout Plain Layout

from matplotlib import rc 
\end_layout

\begin_layout Plain Layout

rc('text',
 usetex=True) 
\end_layout

\begin_layout Plain Layout

rc('legend',**{'fontsize':10}) 
\end_layout

\begin_layout Plain Layout

t0 = 0.0
\end_layout

\begin_layout Plain Layout

t1 = 1.5
\end_layout

\begin_layout Plain Layout

steps = 100
\end_layout

\begin_layout Plain Layout

xvals = np.linspace(t0,t1,steps)
\end_layout

\begin_layout Plain Layout

yvals1 = xvals**2
\end_layout

\begin_layout Plain Layout

yvals2 = np.sin(xvals*2*math.pi)
\end_layout

\begin_layout Plain Layout

fig = plt.figure()
\end_layout

\begin_layout Plain Layout

#Hoehe,
 Breite und Position des Plot
\end_layout

\begin_layout Plain Layout

rect = 0.14,
 0.17,
 0.84,
 0.80 
\end_layout

\begin_layout Plain Layout

ax1 = fig.add_axes(rect,frameon=True)
\end_layout

\begin_layout Plain Layout

ax1.set_ylim([-2,2]) 
\end_layout

\begin_layout Plain Layout

ax1.set_xlim([t0,t1]) 
\end_layout

\begin_layout Plain Layout

stromplot = ax1.plot(xvals,
 yvals1,
\backslash

\end_layout

\begin_layout Plain Layout

  label="$x^2$",c='b',lw=0.7/0.3527)
\end_layout

\begin_layout Plain Layout

sinusplot = ax1.plot(xvals,
 yvals2,
\backslash

\end_layout

\begin_layout Plain Layout

  label="$
\backslash
sin(x)$",
 color = 'b',
\backslash

\end_layout

\begin_layout Plain Layout

      ls='--',
 lw=0.7/0.3527)
\end_layout

\begin_layout Plain Layout

ax1.set_xlabel('$t$')
\end_layout

\begin_layout Plain Layout

ax1.xaxis.set_label_coords(0.55,
\backslash

\end_layout

\begin_layout Plain Layout

  0.07,
 transform=fig.transFigure)
\end_layout

\begin_layout Plain Layout

ax1.set_ylabel('$i$')
\end_layout

\begin_layout Plain Layout

ax1.yaxis.set_label_coords(0.05,
\backslash

\end_layout

\begin_layout Plain Layout

  0.5,
 transform=fig.transFigure)
\end_layout

\begin_layout Plain Layout

legend=ax1.legend(
\backslash

\end_layout

\begin_layout Plain Layout

   loc='lower left',shadow=False)
\end_layout

\begin_layout Plain Layout

xls = 0.2
\end_layout

\begin_layout Plain Layout

xachseneinheit_str = 's'
\end_layout

\begin_layout Plain Layout

x=[ax1.get_xlim()[0]+k*xls for k in 
\backslash

\end_layout

\begin_layout Plain Layout

 range(math.floor((ax1.get_xlim()[1]
\backslash

\end_layout

\begin_layout Plain Layout

 -ax1.get_xlim()[0])*
\backslash

\end_layout

\begin_layout Plain Layout

            (1.0+1e-12)/xls)+1)]
\end_layout

\begin_layout Plain Layout

lbls=[("%.1f"%d).replace('.',',')
\backslash

\end_layout

\begin_layout Plain Layout

      for d in x]
\end_layout

\begin_layout Plain Layout

lbls[-2]=xachseneinheit_str
\end_layout

\begin_layout Plain Layout

plt.xticks(x,lbls)
\end_layout

\begin_layout Plain Layout

# Y-Achse:
\end_layout

\begin_layout Plain Layout

yachseneinheit_str = 'A'
\end_layout

\begin_layout Plain Layout

yls = 0.5
\end_layout

\begin_layout Plain Layout

y=[ax1.get_ylim()[0]+k*yls for k in
\backslash

\end_layout

\begin_layout Plain Layout

 range(math.floor((ax1.get_ylim()[1]
\backslash

\end_layout

\begin_layout Plain Layout

 -ax1.get_ylim()[0])*
\backslash

\end_layout

\begin_layout Plain Layout

                  (1.0+1e-12)/yls)+1)]
\end_layout

\begin_layout Plain Layout

lblsy=[("%.1f"%d).replace('.',',')
\backslash

\end_layout

\begin_layout Plain Layout

       for d in y]
\end_layout

\begin_layout Plain Layout

lblsy[-2]=yachseneinheit_str
\end_layout

\begin_layout Plain Layout

w35=0.35/0.3527
\end_layout

\begin_layout Plain Layout

w18=0.18/0.3527
\end_layout

\begin_layout Plain Layout

plt.yticks(y,lblsy)
\end_layout

\begin_layout Plain Layout

ax1.spines['top'].set_color('none')
\end_layout

\begin_layout Plain Layout

ax1.spines['right'].set_color('none')
\end_layout

\begin_layout Plain Layout

ax1.spines['bottom'].
\backslash

\end_layout

\begin_layout Plain Layout

    set_position('zero')
\end_layout

\begin_layout Plain Layout

ax1.spines['left'].set_linewidth(w35)
\end_layout

\begin_layout Plain Layout

ax1.spines['bottom'].
\backslash

\end_layout

\begin_layout Plain Layout

    set_linewidth(w35)
\end_layout

\begin_layout Plain Layout

print(ax1.xaxis.get_ticks_position())
\end_layout

\begin_layout Plain Layout

ax1.xaxis.set_ticks_position('bottom')
\end_layout

\begin_layout Plain Layout

ax1.grid(b=True,which='both',
\backslash

\end_layout

\begin_layout Plain Layout

  axis='x',c='k',ls='-',lw=w18)
\end_layout

\begin_layout Plain Layout

ax1.grid(b=True,which='both',
\backslash

\end_layout

\begin_layout Plain Layout

  axis='y',c='k',ls='-',lw=w18)
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(100/25.4,63/25.4)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

dstaxtxpt=fig.get_size_inches()[1]*
\backslash

\end_layout

\begin_layout Plain Layout

  25.4*rect[3]/0.3527*(0-
\backslash

\end_layout

\begin_layout Plain Layout

  ax1.get_ylim()[0])/
\backslash

\end_layout

\begin_layout Plain Layout

 (ax1.get_ylim()[1]-
\backslash

\end_layout

\begin_layout Plain Layout

  ax1.get_ylim()[0])+2
\end_layout

\begin_layout Plain Layout

ax1.tick_params(axis='x',
\backslash

\end_layout

\begin_layout Plain Layout

        which='major',
 pad=dstaxtxpt)
\end_layout

\begin_layout Plain Layout

# Achsenpfeil X:
\end_layout

\begin_layout Plain Layout

b_mm=math.tan(7.5*math.pi/180)*20*0.35
\end_layout

\begin_layout Plain Layout

arrowlen_mm = 12.0
\end_layout

\begin_layout Plain Layout

deltax_frac = arrowlen_mm /
\backslash

\end_layout

\begin_layout Plain Layout

    (fig.get_size_inches()[0]*25.4)
\end_layout

\begin_layout Plain Layout

arrowfrac = 10*0.35/arrowlen_mm
\end_layout

\begin_layout Plain Layout

ybf = 0.048
\end_layout

\begin_layout Plain Layout

xbf = 0.57
\end_layout

\begin_layout Plain Layout

ax1.annotate('',
\backslash

\end_layout

\begin_layout Plain Layout

  xy=(xbf+deltax_frac,ybf),
\backslash

\end_layout

\begin_layout Plain Layout

  xycoords='figure fraction',
\backslash

\end_layout

\begin_layout Plain Layout

  xytext=(xbf,ybf),
\backslash

\end_layout

\begin_layout Plain Layout

  textcoords='figure fraction',
\backslash

\end_layout

\begin_layout Plain Layout

  arrowprops=dict(width=w35,
\backslash

\end_layout

\begin_layout Plain Layout

  frac=arrowfrac,
 facecolor='black',
\backslash

\end_layout

\begin_layout Plain Layout

  edgecolor= 'none',
 
\backslash

\end_layout

\begin_layout Plain Layout

  headwidth=b_mm/0.3527))
\end_layout

\begin_layout Plain Layout

# Achsenpfeil Y:
\end_layout

\begin_layout Plain Layout

deltay_frac = arrowlen_mm /
\backslash

\end_layout

\begin_layout Plain Layout

    (fig.get_size_inches()[1]*25.4)
\end_layout

\begin_layout Plain Layout

ybyf = 0.52
\end_layout

\begin_layout Plain Layout

xbyf = 0.03
\end_layout

\begin_layout Plain Layout

ax1.annotate('',
\backslash

\end_layout

\begin_layout Plain Layout

  xy=(xbyf,ybyf+deltay_frac),
 
\backslash

\end_layout

\begin_layout Plain Layout

  xycoords='figure fraction',
\backslash

\end_layout

\begin_layout Plain Layout

  xytext=(xbyf,ybyf),
\backslash

\end_layout

\begin_layout Plain Layout

  textcoords='figure fraction',
\backslash

\end_layout

\begin_layout Plain Layout

  arrowprops=dict(width=w35,
\backslash

\end_layout

\begin_layout Plain Layout

  frac=arrowfrac,facecolor='black',
\backslash

\end_layout

\begin_layout Plain Layout

  edgecolor= 'none',
 
\backslash

\end_layout

\begin_layout Plain Layout

  headwidth=b_mm/0.3527))
\end_layout

\begin_layout Plain Layout

plt.savefig('plot_din.pdf',
\backslash

\end_layout

\begin_layout Plain Layout

            format='pdf')
\end_layout

\begin_layout Plain Layout

plt.savefig('plot_din.png',
\backslash

\end_layout

\begin_layout Plain Layout

            format='png',dpi=600)
\end_layout

\begin_layout Plain Layout

plt.close("all")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ausgabe:
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/019_plotnachdin/plot_din.pdf
	width 9cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Section
Anwendungen
\end_layout

\begin_layout Subsection
Lineare Regression mit Pandas
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:lineareregressionpandas"

\end_inset

Die Bibliothek Pandas ermöglich die Arbeit mit Tabellen wie mit einem Tabellenkalkulationsprogramm.
 Anhand eines Beispieles zur linearen Regression wird die Bedienung gezeigt:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "figures/020_LineareregressionMitPandas/linearregressionpandas.py"
literal "true"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Alternativ,
 müsste aber noch ausgearbeitet werden (Einheiten in der Tabelle):
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# %%
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ty = [
\backslash

\end_layout

\begin_layout Plain Layout

      (20,
 0),
\backslash

\end_layout

\begin_layout Plain Layout

      (16,
 3),
\backslash

\end_layout

\begin_layout Plain Layout

      (15,
 7),
\backslash

\end_layout

\begin_layout Plain Layout

      (16,
 4),
\backslash

\end_layout

\begin_layout Plain Layout

      (13,
 6),
\backslash

\end_layout

\begin_layout Plain Layout

      (10,
 10),
\backslash

\end_layout

\begin_layout Plain Layout

      ]
\end_layout

\begin_layout Plain Layout

df = pd.DataFrame(ty,
 columns=['t (s)',
 'y (m)'])
\end_layout

\begin_layout Plain Layout

print(df)
\end_layout

\begin_layout Plain Layout

# Mittelwert = Summe durch Anzahl
\end_layout

\begin_layout Plain Layout

t_avg = df['t (s)'].sum()/df['t (s)'].count() 
\end_layout

\begin_layout Plain Layout

y_avg = df['y (m)'].sum()/df['y (m)'].count()
\end_layout

\begin_layout Plain Layout

y_avg2 = df['y (m)'].mean() #geht auch
\end_layout

\begin_layout Plain Layout

# Erzeugung neuer Spalten:
\end_layout

\begin_layout Plain Layout

df['t-t_avg (s)'] = df['t (s)']-t_avg
\end_layout

\begin_layout Plain Layout

df['y-y_avg (m)'] = df['y (m)']-y_avg
\end_layout

\begin_layout Plain Layout

df['(t-t_avg)*(y-y_avg) (s m)'] = df['t-t_avg (s)']*df['y-y_avg (m)']
\end_layout

\begin_layout Plain Layout

df['(t-t_avg)^2 (m^2)'] = df['t-t_avg (s)']**2
\end_layout

\begin_layout Plain Layout

m = df['(t-t_avg)*(y-y_avg) (s m)'].sum()/df['(t-t_avg)^2 (m^2)'].sum() # Steigung
\end_layout

\begin_layout Plain Layout

b = y_avg-m*t_avg # Offset
\end_layout

\begin_layout Plain Layout

print(df)
\end_layout

\begin_layout Plain Layout

df.plot()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Ergebnis plotten:
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

fix,
 ax = mpl.subplots()
\end_layout

\begin_layout Plain Layout

ax.plot(df['t (s)'],df['y (m)'],
 'rx')
\end_layout

\begin_layout Plain Layout

ax.plot(df['t (s)'],m*df['t (s)']+b,
 'b-')
\end_layout

\begin_layout Plain Layout

mpl.grid()
\end_layout

\begin_layout Plain Layout

mpl.xlabel('t (s)')
\end_layout

\begin_layout Plain Layout

mpl.ylabel('y (m)')
\end_layout

\begin_layout Plain Layout

mpl.savefig('LinRegPandas.pdf')
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Erzeugt:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    x   y   Dx   Dy  Dx*Dy  Dx^2
\end_layout

\begin_layout Plain Layout

0  20   0  5.0 -5.0  -25.0  25.0
\end_layout

\begin_layout Plain Layout

1  16   3  1.0 -2.0   -2.0   1.0
\end_layout

\begin_layout Plain Layout

2  15   7  0.0  2.0    0.0   0.0
\end_layout

\begin_layout Plain Layout

3  16   4  1.0 -1.0   -1.0   1.0
\end_layout

\begin_layout Plain Layout

4  13   6 -2.0  1.0   -2.0   4.0
\end_layout

\begin_layout Plain Layout

5  10  10 -5.0  5.0  -25.0  25.0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/020_LineareregressionMitPandas/LinRegPandas.pdf
	width 8cm

\end_inset


\end_layout

\begin_layout Subsection
Impulsplot
\end_layout

\begin_layout Standard
Ausgabe von Impulsplots:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

xavg = 1.5
\end_layout

\begin_layout Plain Layout

xsigma = 0.15
\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(120/25.4,80/25.4)
\end_layout

\begin_layout Plain Layout

np.random.seed(0)
\end_layout

\begin_layout Plain Layout

x = np.random.normal(xavg,
 xsigma,
 12)
\end_layout

\begin_layout Plain Layout

y = 0.0*x+1
\end_layout

\begin_layout Plain Layout

ml,
 sl,
 bl = ax.stem(x,y,linefmt='r-',markerfmt=' ',
 basefmt=' ')
\end_layout

\begin_layout Plain Layout

plt.setp(sl,
 linewidth=0.5)
\end_layout

\begin_layout Plain Layout

plt.setp(bl,
 color="none")
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

ax.set_xlim([0,2])
\end_layout

\begin_layout Plain Layout

ax.set_ylim([0,1.2])
\end_layout

\begin_layout Plain Layout

plt.xlabel('Groesse $x$ (m)')
\end_layout

\begin_layout Plain Layout

plt.subplots_adjust(left=0.17,
\backslash

\end_layout

\begin_layout Plain Layout

  right=0.97,
 top=0.97,
 bottom=0.15)
\end_layout

\begin_layout Plain Layout

plt.savefig('bilddatei.pdf')
\end_layout

\begin_layout Plain Layout

plt.show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ausgabe:
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/023_impulsplot/impulsplot.pdf
	width 9cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mehrere Plots übereinander
\end_layout

\begin_layout Standard
Mehrere Plots übereinander:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as mpl
\end_layout

\begin_layout Plain Layout

t = np.linspace(0,10,75)
\end_layout

\begin_layout Plain Layout

fig,
 axs = mpl.subplots(3)
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(70/25.4,125/25.4)
\end_layout

\begin_layout Plain Layout

axs[0].set_ylabel('Position (m)')
\end_layout

\begin_layout Plain Layout

gxphase1,
 = axs[0].plot(t,
 1/2*t**2,
 'r-',
 label='besch')
\end_layout

\begin_layout Plain Layout

axs[1].set_ylabel('Geschw.
 (m/s)')
\end_layout

\begin_layout Plain Layout

gvphase1,
 = axs[1].plot(t,
 t,
 'r-')
\end_layout

\begin_layout Plain Layout

axs[2].set_ylabel('Beschl.
 $
\backslash
mathrm{(m/s^2)}$')
\end_layout

\begin_layout Plain Layout

gaphase1,
 = axs[2].plot(t,
 1+0*t,
 'r-')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

axs[0].grid()
\end_layout

\begin_layout Plain Layout

axs[1].grid()
\end_layout

\begin_layout Plain Layout

axs[2].grid()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

axs[0].set_xlim([0,10])
\end_layout

\begin_layout Plain Layout

axs[0].set_xticklabels([])
\end_layout

\begin_layout Plain Layout

axs[1].set_xlim([0,10])
\end_layout

\begin_layout Plain Layout

axs[1].set_xticklabels([])
\end_layout

\begin_layout Plain Layout

axs[2].set_xlim([0,10])
\end_layout

\begin_layout Plain Layout

axs[0].set_ylim([0,50])
\end_layout

\begin_layout Plain Layout

axs[1].set_ylim([0,10])
\end_layout

\begin_layout Plain Layout

axs[2].set_ylim([0,2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

axs[2].set_xlabel('Zeit (s)')
\end_layout

\begin_layout Plain Layout

mpl.subplots_adjust(left=0.23,
 right=0.94,
 top=0.99,
 bottom=0.09,
 wspace=0.1,
 hspace=0.2)
\end_layout

\begin_layout Plain Layout

fig.show()
\end_layout

\begin_layout Plain Layout

fig.savefig('x-v-a-diagramm.pdf')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ausgabe:
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/026_PlotsUebereinander/x-v-a-diagramm.pdf

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Pixel-Farbnetz
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pixelfarbnetz"

\end_inset

 Ein Pixel-Farbnetz wird aus drei Matrizen gleicher Größe erzeugt.
 Die erste gibt für jeden Pixel die x-Koordinate an.
 Die zweite Matrix die y-Koordinate und die dritte Matrix den Farbwert des Pixels.
 Mit der Option 
\family typewriter
shading='auto'
\family default
 wird angegeben,
 dass die Mitte der Pixel den x- und y-Koordinaten entsprechen.
 Entfällt diese Option,
 sind die äußeren Ecken der Randpixel an den Maximal-Koordinaten.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

xv = np.linspace(-1,1,3)
\end_layout

\begin_layout Plain Layout

yv =  np.linspace(4,1,4)
\end_layout

\begin_layout Plain Layout

Mx,
 My = np.meshgrid(xv,
 yv)
\end_layout

\begin_layout Plain Layout

Mz = np.sqrt(Mx**2+My**2)
\end_layout

\begin_layout Plain Layout

fig,
 ax= plt.subplots()
\end_layout

\begin_layout Plain Layout

fig.set_size_inches(50/25.4,
 50/25.4)
\end_layout

\begin_layout Plain Layout

ax.pcolormesh(Mx,
 My,
 Mz,
\backslash

\end_layout

\begin_layout Plain Layout

  shading='auto')
\end_layout

\begin_layout Plain Layout

ax.grid(lw=1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/018_pcolormesh/pcolm.png
	width 5cm

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Benutzerspezifische Achsenbeschriftung
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:benutzerspezachsenbeschr"

\end_inset

 Die Beschrifung einer Achse lässt sich mit Koordinaten und Strings benuzerspezifisch anpassen.
 In diesem Beispiel ist die horizontale Achsenbeschriftung ein vielfaches von pi/6
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#%%
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from numpy import *
\end_layout

\begin_layout Plain Layout

from math import pi
\end_layout

\begin_layout Plain Layout

import os
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

p = np.array([p for p in range(-7,7+1)])
\end_layout

\begin_layout Plain Layout

t = p/6*pi
\end_layout

\begin_layout Plain Layout

lbl = [str(k)+'/6pi' for k in p] # Hier pi durch
\end_layout

\begin_layout Plain Layout

# das Unicode-Pi ersetzen.
\end_layout

\begin_layout Plain Layout

# ax.plot(t,
 i1_von_t,
 'g-')
\end_layout

\begin_layout Plain Layout

thighres = np.linspace(-7/6*pi,7/6*pi,300)
\end_layout

\begin_layout Plain Layout

ax.plot(thighres,
 cos(thighres),
 'r-')
\end_layout

\begin_layout Plain Layout

ax.plot(thighres,
 sqrt(1-sin(thighres)**2),
 'gx')
\end_layout

\begin_layout Plain Layout

plt.xticks(t,
 lbl,
 rotation=90)  
\end_layout

\begin_layout Plain Layout

ax.grid()
\end_layout

\begin_layout Plain Layout

plt.savefig(os.path.basename(__file__).replace('.py','') + '_gen.pdf')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset


\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/032_benuzerspezachsenbeschr/BenutzerspezifischeAchsenbeschriftung_gen.pdf
	lyxscale 50

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
null
\end_layout

\end_inset


\end_layout

\begin_layout Section
PDF-Dateierzeugung
\end_layout

\begin_layout Subsection
PDF-Dateiausgabe
\end_layout

\begin_layout Standard
Mit dem folgenden Code wird eine PDF-Datei mit der Breite 80 mm und der Höhe 50 mm erzeugt.
 In Anaconda muss gegebenenfalls das Paket 
\begin_inset Quotes pld
\end_inset

reportlab
\begin_inset Quotes prd
\end_inset

 installiert werden.
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pdfdateiausgabe"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from reportlab.pdfgen.canvas import Canvas
\end_layout

\begin_layout Plain Layout

# pagesize units are in 1/72 inch
\end_layout

\begin_layout Plain Layout

canvas = Canvas("ausgabe.pdf",
 pagesize=(80/25.4*72,
 50/25.4*72))
\end_layout

\begin_layout Plain Layout

FoSi = 10 # Fontsize
\end_layout

\begin_layout Plain Layout

canvas.setFont("Times-Roman",
 FoSi)
\end_layout

\begin_layout Plain Layout

textobject = canvas.beginText(2,50/25.4*72-FoSi)
\end_layout

\begin_layout Plain Layout

txt = "hallo"
\end_layout

\begin_layout Plain Layout

txt = txt + "
\backslash
n welt"
\end_layout

\begin_layout Plain Layout

txt = txt + "
\backslash
n dritte Zeile"
\end_layout

\begin_layout Plain Layout

txt = txt + "
\backslash
n vierte zeile"
\end_layout

\begin_layout Plain Layout

textobject.textLines(txt)
\end_layout

\begin_layout Plain Layout

canvas.drawText(textobject)
\end_layout

\begin_layout Plain Layout

canvas.save()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Erzeugt:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/014_pdfausgabe/ausgabe.pdf

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Pandas
\end_layout

\begin_layout Subsection
Tabellenbreite in Pandas
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:tabellenbreitepandas"

\end_inset

Bei der Ausgabe von Tabellen mit Pandas wird ab einer bestimmten Breite ein Zeilenumbruch eingefügt.
 Der nachfolgende Code verhindert das (juPyter)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

pd.set_option('display.expand_frame_repr',
 False)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mehrzeilenstring als Datenquelle
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:mehrzeilenstringalsdatenquelle"

\end_inset

Die Dateneingabe als mehzeiliger String kann folgendermaßen erfolgen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#%%
\end_layout

\begin_layout Plain Layout

import sys
\end_layout

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

from io import StringIO
\end_layout

\begin_layout Plain Layout

txtdata = StringIO("""
\end_layout

\begin_layout Plain Layout

Author;
      Titel;
  ISBN
\end_layout

\begin_layout Plain Layout

Muster,
 Max;
 Test;
   12345
\end_layout

\begin_layout Plain Layout

""")
\end_layout

\begin_layout Plain Layout

df = pd.read_csv(txtdata,
 sep=";")
\end_layout

\begin_layout Plain Layout

print(df)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Spalten kombinieren
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:pandasspaltenkombinieren"

\end_inset

Inhalt zweier Spalten zusammenführen,
 in ein Set zusammenfassen und ein Element entfernen
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import pandas as pd
\end_layout

\begin_layout Plain Layout

dummy_data3 = {
\end_layout

\begin_layout Plain Layout

        'id':
 ['1',
 '2',
 '3'],
\end_layout

\begin_layout Plain Layout

        'F1':
 [11,
 12,
 13],
\end_layout

\begin_layout Plain Layout

        'F2':
 [21,
 22,
 23],}
\end_layout

\begin_layout Plain Layout

df3 = pd.DataFrame(dummy_data3)
\end_layout

\begin_layout Plain Layout

F1L = df3['F1'].tolist()
\end_layout

\begin_layout Plain Layout

F2L = df3['F2'].tolist()
\end_layout

\begin_layout Plain Layout

elemente =  set(F1L).union(set(F2L))
\end_layout

\begin_layout Plain Layout

elemente.remove(22)
\end_layout

\begin_layout Plain Layout

print(elemente) # {21,
 23,
 11,
 12,
 13}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Konsolenanwendungen
\end_layout

\begin_layout Subsection
Benutzereingaben in der Konsole
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:benutzereingabenkonsole"

\end_inset

Bei einfachen Anwendungen kann der Benutzer auch in der Konsole Eingaben machen:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

text = input(
\begin_inset Quotes pld
\end_inset

Eingabe:
 
\begin_inset Quotes prd
\end_inset

)
\end_layout

\begin_layout Plain Layout

print(text)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dies kann auch in einer Schleife genutzt werde,
 um den Programmablauf anzuhalten:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for i in range(10):
\end_layout

\begin_layout Plain Layout

    print(i)
\end_layout

\begin_layout Plain Layout

    input()
\end_layout

\end_inset


\end_layout

\begin_layout Section
GUIs
\end_layout

\begin_layout Subsection
Messagebox
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:messagebox"

\end_inset

Einfache Messagebox:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from tkinter import *
\end_layout

\begin_layout Plain Layout

from tkinter import messagebox
\end_layout

\begin_layout Plain Layout

root = Tk()
\end_layout

\begin_layout Plain Layout

root.withdraw()
\end_layout

\begin_layout Plain Layout

messagebox.showinfo('Dialogtitel',
 'Nachricht')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wenn mehrere Messageboxen nacheinander angezeigt werden,
 sollen sie im Vordergrund angezeigt werden
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/17280637/tkinter-messagebox-without-window
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

root = Tk()
\end_layout

\begin_layout Plain Layout

root.withdraw()
\end_layout

\begin_layout Plain Layout

texto = Toplevel(root)
\end_layout

\begin_layout Plain Layout

messagebox.showinfo('Warn',
 'Messagetext',
 parent=texto)
\end_layout

\begin_layout Plain Layout

root.destroy()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Quelle:
 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://stackoverflow.com/questions/36272098/how-to-get-tkinter-messagebox-to-appear-in-front-of-toplevel
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
XML-Dateien
\end_layout

\begin_layout Subsection
Elemente finden
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:elementefinden"

\end_inset

Elemente eines bestimmten Typs (in diesem Beispiel 
\begin_inset Quotes pld
\end_inset

element
\begin_inset Quotes prd
\end_inset

) rekursiv finden:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import xml.etree.ElementTree as ET
\end_layout

\begin_layout Plain Layout

tree = ET.parse('schaltplan.qet')
\end_layout

\begin_layout Plain Layout

root = tree.getroot()
\end_layout

\begin_layout Plain Layout

for e in root.iter('element'):
\end_layout

\begin_layout Plain Layout

    print(e)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Subelemente ermitteln
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:sumbelementefinden"

\end_inset

Ob und wieviele Subelemente (child elements) ein Element hat,
 lässt sich mit der list-Funktion ermitteln:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import xml.etree.ElementTree as ET
\end_layout

\begin_layout Plain Layout

tree = ET.parse('schaltplan.qet')
\end_layout

\begin_layout Plain Layout

root = tree.getroot()
\end_layout

\begin_layout Plain Layout

print(list(root))
\end_layout

\end_inset


\end_layout

\begin_layout Section
Interaktive Plots
\end_layout

\begin_layout Subsection
Interaktive Plots mit iPython
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "eq:interaktiveplotsipython"

\end_inset

Plots können mit Schiebereglern zu interaktiven Grafiken gemacht werden.
 Die Schieberegler bestimmen einen Variablenwert und daraufhin wird die Grafik sofort aktualisiert.
 Dies Funktionalität ist in JuPyter vorhanden,
 wird hier aber für iPython gezeigt.
 Der Vorteil von iPython ist,
 dass das Dateiformat eine Textdatei ist.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#%%
\end_layout

\begin_layout Plain Layout

# Quelle:
 https://ipywidgets.readthedocs.io/
\end_layout

\begin_layout Plain Layout

# en/stable/examples/Using%20Interact.html
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

from ipywidgets import interact
\end_layout

\begin_layout Plain Layout

import ipywidgets as widget
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f(t0,
 k):
\end_layout

\begin_layout Plain Layout

    t = np.linspace(-2,
 2,
 200)
\end_layout

\begin_layout Plain Layout

    y = -np.cos(1/(k/1000+(t-t0)**2))
\end_layout

\begin_layout Plain Layout

    fig,
 ax = plt.subplots()
\end_layout

\begin_layout Plain Layout

    g1,
 = ax.plot(t,
 y,
 'r-',
  lw=2)
\end_layout

\begin_layout Plain Layout

    plt.grid()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

interact(f,
 t0=(-2,2,0.1),
 k=(1,500,1))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ausgabe:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename S:/0Siaenen/Konzeptsammlung_Python/src/figures/033_sliderinteractiveplot/sliderinteractiveplot.png
	width 9cm

\end_inset


\end_layout

\end_body
\end_document
